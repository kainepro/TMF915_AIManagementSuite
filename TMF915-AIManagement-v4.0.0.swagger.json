{
    "swagger": "2.0",
    "info": {
        "title": "Ai Management",
        "description": "This is Swagger UI environment generated for the TMF Ai Management specification",
        "version": "4.0.0"
    },
    "host": "serverRoot",
    "basePath": "/tmf-api/AiM/v4/",
    "schemes": [
        "https"
    ],
    "consumes": [
        "application/json;charset=utf-8"
    ],
    "produces": [
        "application/json;charset=utf-8"
    ],
    "tags": [
        {
            "name": "aiModel"
        },
        {
            "name": "aiModelSpecification"
        },
        {
            "name": "alarm"
        },
        {
            "name": "threshold"
        },
        {
            "name": "aiContract"
        },
        {
            "name": "aiContractSpecification"
        },
        {
            "name": "event"
        },
        {
            "name": "topic"
        },
        {
            "name": "hub"
        },
        {
            "name": "ackAlarms"
        },
        {
            "name": "unAckAlarms"
        },
        {
            "name": "clearAlarms"
        },
        {
            "name": "commentAlarms"
        },
        {
            "name": "groupAlarms"
        },
        {
            "name": "unGroupAlarms"
        },
        {
            "name": "thresholdJob"
        },
        {
            "name": "thresholdRule"
        },
        {
            "name": "notification listeners (client side)"
        },
        {
            "name": "events subscription"
        }
    ],
    "paths": {
        "/aiModel": {
            "get": {
                "operationId": "listAiModel",
                "summary": "List or find AiModel objects",
                "description": "This operation list or find AiModel entities",
                "tags": [
                    "aiModel"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AiModel"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createAiModel",
                "summary": "Creates a AiModel",
                "description": "This operation creates a AiModel entity.",
                "tags": [
                    "aiModel"
                ],
                "parameters": [
                    {
                        "name": "aiModel",
                        "description": "The AiModel to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AiModel_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/AiModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/aiModel/{id}": {
            "get": {
                "operationId": "retrieveAiModel",
                "summary": "Retrieves a AiModel by ID",
                "description": "This operation retrieves a AiModel entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "aiModel"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the AiModel",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/AiModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchAiModel",
                "summary": "Updates partially a AiModel",
                "description": "This operation updates partially a AiModel entity.",
                "tags": [
                    "aiModel"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the AiModel",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "aiModel",
                        "description": "The AiModel to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AiModel_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/AiModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteAiModel",
                "summary": "Deletes a AiModel",
                "description": "This operation deletes a AiModel entity.",
                "tags": [
                    "aiModel"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the AiModel",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/aiModelSpecification": {
            "get": {
                "operationId": "listAiModelSpecification",
                "summary": "List or find AiModelSpecification objects",
                "description": "This operation list or find AiModelSpecification entities",
                "tags": [
                    "aiModelSpecification"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AiModelSpecification"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createAiModelSpecification",
                "summary": "Creates a AiModelSpecification",
                "description": "This operation creates a AiModelSpecification entity.",
                "tags": [
                    "aiModelSpecification"
                ],
                "parameters": [
                    {
                        "name": "aiModelSpecification",
                        "description": "The AiModelSpecification to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AiModelSpecification_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/AiModelSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/aiModelSpecification/{id}": {
            "get": {
                "operationId": "retrieveAiModelSpecification",
                "summary": "Retrieves a AiModelSpecification by ID",
                "description": "This operation retrieves a AiModelSpecification entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "aiModelSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the AiModelSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/AiModelSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchAiModelSpecification",
                "summary": "Updates partially a AiModelSpecification",
                "description": "This operation updates partially a AiModelSpecification entity.",
                "tags": [
                    "aiModelSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the AiModelSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "aiModelSpecification",
                        "description": "The AiModelSpecification to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AiModelSpecification_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/AiModelSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteAiModelSpecification",
                "summary": "Deletes a AiModelSpecification",
                "description": "This operation deletes a AiModelSpecification entity.",
                "tags": [
                    "aiModelSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the AiModelSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/alarm": {
            "get": {
                "operationId": "listAlarm",
                "summary": "List or find Alarm objects",
                "description": "This operation list or find Alarm entities",
                "tags": [
                    "alarm"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Alarm"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createAlarm",
                "summary": "Creates a Alarm",
                "description": "This operation creates a Alarm entity.",
                "tags": [
                    "alarm"
                ],
                "parameters": [
                    {
                        "name": "alarm",
                        "description": "The Alarm to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Alarm_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/Alarm"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/alarm/{id}": {
            "get": {
                "operationId": "retrieveAlarm",
                "summary": "Retrieves a Alarm by ID",
                "description": "This operation retrieves a Alarm entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "alarm"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the Alarm",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Alarm"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchAlarm",
                "summary": "Updates partially a Alarm",
                "description": "This operation updates partially a Alarm entity.",
                "tags": [
                    "alarm"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the Alarm",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "alarm",
                        "description": "The Alarm to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Alarm_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/Alarm"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteAlarm",
                "summary": "Deletes a Alarm",
                "description": "This operation deletes a Alarm entity.",
                "tags": [
                    "alarm"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the Alarm",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/threshold": {
            "get": {
                "operationId": "listThreshold",
                "summary": "List or find Threshold objects",
                "description": "This operation list or find Threshold entities",
                "tags": [
                    "threshold"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Threshold"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createThreshold",
                "summary": "Creates a Threshold",
                "description": "This operation creates a Threshold entity.",
                "tags": [
                    "threshold"
                ],
                "parameters": [
                    {
                        "name": "threshold",
                        "description": "The Threshold to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Threshold_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/Threshold"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/threshold/{id}": {
            "get": {
                "operationId": "retrieveThreshold",
                "summary": "Retrieves a Threshold by ID",
                "description": "This operation retrieves a Threshold entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "threshold"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the Threshold",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Threshold"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchThreshold",
                "summary": "Updates partially a Threshold",
                "description": "This operation updates partially a Threshold entity.",
                "tags": [
                    "threshold"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the Threshold",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "threshold",
                        "description": "The Threshold to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Threshold_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/Threshold"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteThreshold",
                "summary": "Deletes a Threshold",
                "description": "This operation deletes a Threshold entity.",
                "tags": [
                    "threshold"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the Threshold",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/aiContract": {
            "get": {
                "operationId": "listAiContract",
                "summary": "List or find AiContract objects",
                "description": "This operation list or find AiContract entities",
                "tags": [
                    "aiContract"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AiContract"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createAiContract",
                "summary": "Creates a AiContract",
                "description": "This operation creates a AiContract entity.",
                "tags": [
                    "aiContract"
                ],
                "parameters": [
                    {
                        "name": "aiContract",
                        "description": "The AiContract to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AiContract_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/AiContract"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/aiContract/{id}": {
            "get": {
                "operationId": "retrieveAiContract",
                "summary": "Retrieves a AiContract by ID",
                "description": "This operation retrieves a AiContract entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "aiContract"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the AiContract",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/AiContract"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchAiContract",
                "summary": "Updates partially a AiContract",
                "description": "This operation updates partially a AiContract entity.",
                "tags": [
                    "aiContract"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the AiContract",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "aiContract",
                        "description": "The AiContract to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AiContract_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/AiContract"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteAiContract",
                "summary": "Deletes a AiContract",
                "description": "This operation deletes a AiContract entity.",
                "tags": [
                    "aiContract"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the AiContract",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/aiContractSpecification": {
            "get": {
                "operationId": "listAiContractSpecification",
                "summary": "List or find AiContractSpecification objects",
                "description": "This operation list or find AiContractSpecification entities",
                "tags": [
                    "aiContractSpecification"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AiContractSpecification"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createAiContractSpecification",
                "summary": "Creates a AiContractSpecification",
                "description": "This operation creates a AiContractSpecification entity.",
                "tags": [
                    "aiContractSpecification"
                ],
                "parameters": [
                    {
                        "name": "aiContractSpecification",
                        "description": "The AiContractSpecification to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AiContractSpecification_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/AiContractSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/aiContractSpecification/{id}": {
            "get": {
                "operationId": "retrieveAiContractSpecification",
                "summary": "Retrieves a AiContractSpecification by ID",
                "description": "This operation retrieves a AiContractSpecification entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "aiContractSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the AiContractSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/AiContractSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchAiContractSpecification",
                "summary": "Updates partially a AiContractSpecification",
                "description": "This operation updates partially a AiContractSpecification entity.",
                "tags": [
                    "aiContractSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the AiContractSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "aiContractSpecification",
                        "description": "The AiContractSpecification to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AiContractSpecification_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/AiContractSpecification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteAiContractSpecification",
                "summary": "Deletes a AiContractSpecification",
                "description": "This operation deletes a AiContractSpecification entity.",
                "tags": [
                    "aiContractSpecification"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the AiContractSpecification",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/topic/{topicId}/event": {
            "get": {
                "operationId": "listEvent",
                "summary": "List or find Event objects",
                "description": "This operation list or find Event entities",
                "tags": [
                    "event"
                ],
                "parameters": [
                    {
                        "name": "topicId",
                        "description": "Identifier of the parent Topic entity",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Event"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createEvent",
                "summary": "Creates a Event",
                "description": "This operation creates a Event entity.",
                "tags": [
                    "event"
                ],
                "parameters": [
                    {
                        "name": "topicId",
                        "description": "Identifier of the parent Topic entity",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "event",
                        "description": "The Event to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Event_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/Event"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/topic/{topicId}/event/{id}": {
            "get": {
                "operationId": "retrieveEvent",
                "summary": "Retrieves a Event by ID",
                "description": "This operation retrieves a Event entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "event"
                ],
                "parameters": [
                    {
                        "name": "topicId",
                        "description": "Identifier of the parent Topic entity",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "id",
                        "description": "Identifier of the Event",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Event"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/topic": {
            "get": {
                "operationId": "listTopic",
                "summary": "List or find Topic objects",
                "description": "This operation list or find Topic entities",
                "tags": [
                    "topic"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Topic"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createTopic",
                "summary": "Creates a Topic",
                "description": "This operation creates a Topic entity.",
                "tags": [
                    "topic"
                ],
                "parameters": [
                    {
                        "name": "topic",
                        "description": "The Topic to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Topic_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/Topic"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/topic/{id}": {
            "get": {
                "operationId": "retrieveTopic",
                "summary": "Retrieves a Topic by ID",
                "description": "This operation retrieves a Topic entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "topic"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the Topic",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Topic"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteTopic",
                "summary": "Deletes a Topic",
                "description": "This operation deletes a Topic entity.",
                "tags": [
                    "topic"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the Topic",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/topic/{topicId}/hub": {
            "get": {
                "operationId": "listHub",
                "summary": "List or find Hub objects",
                "description": "This operation list or find Hub entities",
                "tags": [
                    "hub"
                ],
                "parameters": [
                    {
                        "name": "topicId",
                        "description": "Identifier of the parent Topic entity",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Hub"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createHub",
                "summary": "Creates a Hub",
                "description": "This operation creates a Hub entity.",
                "tags": [
                    "hub"
                ],
                "parameters": [
                    {
                        "name": "topicId",
                        "description": "Identifier of the parent Topic entity",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "hub",
                        "description": "The Hub to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Hub_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/Hub"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/topic/{topicId}/hub/{id}": {
            "get": {
                "operationId": "retrieveHub",
                "summary": "Retrieves a Hub by ID",
                "description": "This operation retrieves a Hub entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "hub"
                ],
                "parameters": [
                    {
                        "name": "topicId",
                        "description": "Identifier of the parent Topic entity",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "id",
                        "description": "Identifier of the Hub",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/Hub"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteHub",
                "summary": "Deletes a Hub",
                "description": "This operation deletes a Hub entity.",
                "tags": [
                    "hub"
                ],
                "parameters": [
                    {
                        "name": "topicId",
                        "description": "Identifier of the parent Topic entity",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "id",
                        "description": "Identifier of the Hub",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/ackAlarms": {
            "get": {
                "operationId": "listAckAlarms",
                "summary": "List or find AckAlarms objects",
                "description": "This operation list or find AckAlarms entities",
                "tags": [
                    "ackAlarms"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AckAlarms"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createAckAlarms",
                "summary": "Creates a AckAlarms",
                "description": "This operation creates a AckAlarms entity.",
                "tags": [
                    "ackAlarms"
                ],
                "parameters": [
                    {
                        "name": "ackAlarms",
                        "description": "The AckAlarms to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AckAlarms_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/AckAlarms"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/ackAlarms/{id}": {
            "get": {
                "operationId": "retrieveAckAlarms",
                "summary": "Retrieves a AckAlarms by ID",
                "description": "This operation retrieves a AckAlarms entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "ackAlarms"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the AckAlarms",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/AckAlarms"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/unAckAlarms": {
            "get": {
                "operationId": "listUnAckAlarms",
                "summary": "List or find UnAckAlarms objects",
                "description": "This operation list or find UnAckAlarms entities",
                "tags": [
                    "unAckAlarms"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UnAckAlarms"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createUnAckAlarms",
                "summary": "Creates a UnAckAlarms",
                "description": "This operation creates a UnAckAlarms entity.",
                "tags": [
                    "unAckAlarms"
                ],
                "parameters": [
                    {
                        "name": "unAckAlarms",
                        "description": "The UnAckAlarms to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UnAckAlarms_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/UnAckAlarms"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/unAckAlarms/{id}": {
            "get": {
                "operationId": "retrieveUnAckAlarms",
                "summary": "Retrieves a UnAckAlarms by ID",
                "description": "This operation retrieves a UnAckAlarms entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "unAckAlarms"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the UnAckAlarms",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/UnAckAlarms"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/clearAlarms": {
            "get": {
                "operationId": "listClearAlarms",
                "summary": "List or find ClearAlarms objects",
                "description": "This operation list or find ClearAlarms entities",
                "tags": [
                    "clearAlarms"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ClearAlarms"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createClearAlarms",
                "summary": "Creates a ClearAlarms",
                "description": "This operation creates a ClearAlarms entity.",
                "tags": [
                    "clearAlarms"
                ],
                "parameters": [
                    {
                        "name": "clearAlarms",
                        "description": "The ClearAlarms to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ClearAlarms_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ClearAlarms"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/clearAlarms/{id}": {
            "get": {
                "operationId": "retrieveClearAlarms",
                "summary": "Retrieves a ClearAlarms by ID",
                "description": "This operation retrieves a ClearAlarms entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "clearAlarms"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ClearAlarms",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ClearAlarms"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/commentAlarms": {
            "get": {
                "operationId": "listCommentAlarms",
                "summary": "List or find CommentAlarms objects",
                "description": "This operation list or find CommentAlarms entities",
                "tags": [
                    "commentAlarms"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CommentAlarms"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createCommentAlarms",
                "summary": "Creates a CommentAlarms",
                "description": "This operation creates a CommentAlarms entity.",
                "tags": [
                    "commentAlarms"
                ],
                "parameters": [
                    {
                        "name": "commentAlarms",
                        "description": "The CommentAlarms to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CommentAlarms_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/CommentAlarms"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/commentAlarms/{id}": {
            "get": {
                "operationId": "retrieveCommentAlarms",
                "summary": "Retrieves a CommentAlarms by ID",
                "description": "This operation retrieves a CommentAlarms entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "commentAlarms"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the CommentAlarms",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/CommentAlarms"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/groupAlarms": {
            "get": {
                "operationId": "listGroupAlarms",
                "summary": "List or find GroupAlarms objects",
                "description": "This operation list or find GroupAlarms entities",
                "tags": [
                    "groupAlarms"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GroupAlarms"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createGroupAlarms",
                "summary": "Creates a GroupAlarms",
                "description": "This operation creates a GroupAlarms entity.",
                "tags": [
                    "groupAlarms"
                ],
                "parameters": [
                    {
                        "name": "groupAlarms",
                        "description": "The GroupAlarms to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GroupAlarms_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/GroupAlarms"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/groupAlarms/{id}": {
            "get": {
                "operationId": "retrieveGroupAlarms",
                "summary": "Retrieves a GroupAlarms by ID",
                "description": "This operation retrieves a GroupAlarms entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "groupAlarms"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the GroupAlarms",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/GroupAlarms"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/unGroupAlarms": {
            "get": {
                "operationId": "listUnGroupAlarms",
                "summary": "List or find UnGroupAlarms objects",
                "description": "This operation list or find UnGroupAlarms entities",
                "tags": [
                    "unGroupAlarms"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UnGroupAlarms"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createUnGroupAlarms",
                "summary": "Creates a UnGroupAlarms",
                "description": "This operation creates a UnGroupAlarms entity.",
                "tags": [
                    "unGroupAlarms"
                ],
                "parameters": [
                    {
                        "name": "unGroupAlarms",
                        "description": "The UnGroupAlarms to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UnGroupAlarms_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/UnGroupAlarms"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/unGroupAlarms/{id}": {
            "get": {
                "operationId": "retrieveUnGroupAlarms",
                "summary": "Retrieves a UnGroupAlarms by ID",
                "description": "This operation retrieves a UnGroupAlarms entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "unGroupAlarms"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the UnGroupAlarms",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/UnGroupAlarms"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/thresholdJob": {
            "get": {
                "operationId": "listThresholdJob",
                "summary": "List or find ThresholdJob objects",
                "description": "This operation list or find ThresholdJob entities",
                "tags": [
                    "thresholdJob"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ThresholdJob"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createThresholdJob",
                "summary": "Creates a ThresholdJob",
                "description": "This operation creates a ThresholdJob entity.",
                "tags": [
                    "thresholdJob"
                ],
                "parameters": [
                    {
                        "name": "thresholdJob",
                        "description": "The ThresholdJob to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ThresholdJob_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ThresholdJob"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/thresholdJob/{id}": {
            "get": {
                "operationId": "retrieveThresholdJob",
                "summary": "Retrieves a ThresholdJob by ID",
                "description": "This operation retrieves a ThresholdJob entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "thresholdJob"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ThresholdJob",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ThresholdJob"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteThresholdJob",
                "summary": "Deletes a ThresholdJob",
                "description": "This operation deletes a ThresholdJob entity.",
                "tags": [
                    "thresholdJob"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ThresholdJob",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchThresholdJob",
                "summary": "Updates partially a ThresholdJob",
                "description": "This operation updates partially a ThresholdJob entity.",
                "tags": [
                    "thresholdJob"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ThresholdJob",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "thresholdJob",
                        "description": "The ThresholdJob to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ThresholdJob_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/ThresholdJob"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/thresholdRule": {
            "get": {
                "operationId": "listThresholdRule",
                "summary": "List or find ThresholdRule objects",
                "description": "This operation list or find ThresholdRule entities",
                "tags": [
                    "thresholdRule"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "string"
                    },
                    {
                        "name": "offset",
                        "description": "Requested index for start of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    },
                    {
                        "name": "limit",
                        "description": "Requested number of resources to be provided in response",
                        "required": false,
                        "in": "query",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-Result-Count": {
                                "description": "Actual number of items returned in the response body",
                                "type": "integer"
                            },
                            "X-Total-Count": {
                                "description": "Total number of items matching criteria",
                                "type": "integer"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ThresholdRule"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "operationId": "createThresholdRule",
                "summary": "Creates a ThresholdRule",
                "description": "This operation creates a ThresholdRule entity.",
                "tags": [
                    "thresholdRule"
                ],
                "parameters": [
                    {
                        "name": "thresholdRule",
                        "description": "The ThresholdRule to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ThresholdRule_Create"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ThresholdRule"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/thresholdRule/{id}": {
            "get": {
                "operationId": "retrieveThresholdRule",
                "summary": "Retrieves a ThresholdRule by ID",
                "description": "This operation retrieves a ThresholdRule entity. Attribute selection is enabled for all first level attributes.",
                "tags": [
                    "thresholdRule"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ThresholdRule",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "fields",
                        "description": "Comma-separated properties to provide in response",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ThresholdRule"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteThresholdRule",
                "summary": "Deletes a ThresholdRule",
                "description": "This operation deletes a ThresholdRule entity.",
                "tags": [
                    "thresholdRule"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ThresholdRule",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "patch": {
                "operationId": "patchThresholdRule",
                "summary": "Updates partially a ThresholdRule",
                "description": "This operation updates partially a ThresholdRule entity.",
                "tags": [
                    "thresholdRule"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "description": "Identifier of the ThresholdRule",
                        "required": true,
                        "type": "string",
                        "in": "path"
                    },
                    {
                        "name": "thresholdRule",
                        "description": "The ThresholdRule to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ThresholdRule_Update"
                        },
                        "in": "body"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "$ref": "#/definitions/ThresholdRule"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hub": {
            "post": {
                "operationId": "registerListener",
                "summary": "Register a listener",
                "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
                "tags": [
                    "events subscription"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "schema": {
                            "$ref": "#/definitions/EventSubscriptionInput"
                        },
                        "required": true,
                        "in": "body",
                        "description": "Data containing the callback endpoint to deliver the information"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Subscribed",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hub/{id}": {
            "delete": {
                "operationId": "unregisterListener",
                "summary": "Unregister a listener",
                "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
                "tags": [
                    "events subscription"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "required": true,
                        "in": "path",
                        "description": "The id of the registered listener"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/aiModelCreateEvent": {
            "post": {
                "operationId": "listenToAiModelCreateEvent",
                "summary": "Client listener for entity AiModelCreateEvent",
                "description": "Example of a client listener for receiving the notification AiModelCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/AiModelCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/aiModelAttributeValueChangeEvent": {
            "post": {
                "operationId": "listenToAiModelAttributeValueChangeEvent",
                "summary": "Client listener for entity AiModelAttributeValueChangeEvent",
                "description": "Example of a client listener for receiving the notification AiModelAttributeValueChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/AiModelAttributeValueChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/aiModelStateChangeEvent": {
            "post": {
                "operationId": "listenToAiModelStateChangeEvent",
                "summary": "Client listener for entity AiModelStateChangeEvent",
                "description": "Example of a client listener for receiving the notification AiModelStateChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/AiModelStateChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/aiModelDeleteEvent": {
            "post": {
                "operationId": "listenToAiModelDeleteEvent",
                "summary": "Client listener for entity AiModelDeleteEvent",
                "description": "Example of a client listener for receiving the notification AiModelDeleteEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/AiModelDeleteEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/aiModelSpecificationCreateEvent": {
            "post": {
                "operationId": "listenToAiModelSpecificationCreateEvent",
                "summary": "Client listener for entity AiModelSpecificationCreateEvent",
                "description": "Example of a client listener for receiving the notification AiModelSpecificationCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/AiModelSpecificationCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/aiModelSpecificationChangeEvent": {
            "post": {
                "operationId": "listenToAiModelSpecificationChangeEvent",
                "summary": "Client listener for entity AiModelSpecificationChangeEvent",
                "description": "Example of a client listener for receiving the notification AiModelSpecificationChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/AiModelSpecificationChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/aiModelSpecificationDeleteEvent": {
            "post": {
                "operationId": "listenToAiModelSpecificationDeleteEvent",
                "summary": "Client listener for entity AiModelSpecificationDeleteEvent",
                "description": "Example of a client listener for receiving the notification AiModelSpecificationDeleteEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/AiModelSpecificationDeleteEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/alarmCreateEvent": {
            "post": {
                "operationId": "listenToAlarmCreateEvent",
                "summary": "Client listener for entity AlarmCreateEvent",
                "description": "Example of a client listener for receiving the notification AlarmCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/AlarmCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/alarmAttributeValueChangeEvent": {
            "post": {
                "operationId": "listenToAlarmAttributeValueChangeEvent",
                "summary": "Client listener for entity AlarmAttributeValueChangeEvent",
                "description": "Example of a client listener for receiving the notification AlarmAttributeValueChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/AlarmAttributeValueChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/alarmStateChangeEvent": {
            "post": {
                "operationId": "listenToAlarmStateChangeEvent",
                "summary": "Client listener for entity AlarmStateChangeEvent",
                "description": "Example of a client listener for receiving the notification AlarmStateChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/AlarmStateChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/alarmDeleteEvent": {
            "post": {
                "operationId": "listenToAlarmDeleteEvent",
                "summary": "Client listener for entity AlarmDeleteEvent",
                "description": "Example of a client listener for receiving the notification AlarmDeleteEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/AlarmDeleteEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/thresholdCreateEvent": {
            "post": {
                "operationId": "listenToThresholdCreateEvent",
                "summary": "Client listener for entity ThresholdCreateEvent",
                "description": "Example of a client listener for receiving the notification ThresholdCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ThresholdCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/thresholdAttributeValueChangeEvent": {
            "post": {
                "operationId": "listenToThresholdAttributeValueChangeEvent",
                "summary": "Client listener for entity ThresholdAttributeValueChangeEvent",
                "description": "Example of a client listener for receiving the notification ThresholdAttributeValueChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ThresholdAttributeValueChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/thresholdDeleteEvent": {
            "post": {
                "operationId": "listenToThresholdDeleteEvent",
                "summary": "Client listener for entity ThresholdDeleteEvent",
                "description": "Example of a client listener for receiving the notification ThresholdDeleteEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ThresholdDeleteEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/aiContractCreateEvent": {
            "post": {
                "operationId": "listenToAiContractCreateEvent",
                "summary": "Client listener for entity AiContractCreateEvent",
                "description": "Example of a client listener for receiving the notification AiContractCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/AiContractCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/aiContractAttributeValueChangeEvent": {
            "post": {
                "operationId": "listenToAiContractAttributeValueChangeEvent",
                "summary": "Client listener for entity AiContractAttributeValueChangeEvent",
                "description": "Example of a client listener for receiving the notification AiContractAttributeValueChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/AiContractAttributeValueChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/aiContractStateChangeEvent": {
            "post": {
                "operationId": "listenToAiContractStateChangeEvent",
                "summary": "Client listener for entity AiContractStateChangeEvent",
                "description": "Example of a client listener for receiving the notification AiContractStateChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/AiContractStateChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/aiContractDeleteEvent": {
            "post": {
                "operationId": "listenToAiContractDeleteEvent",
                "summary": "Client listener for entity AiContractDeleteEvent",
                "description": "Example of a client listener for receiving the notification AiContractDeleteEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/AiContractDeleteEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/aiContractSpecificationCreateEvent": {
            "post": {
                "operationId": "listenToAiContractSpecificationCreateEvent",
                "summary": "Client listener for entity AiContractSpecificationCreateEvent",
                "description": "Example of a client listener for receiving the notification AiContractSpecificationCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/AiContractSpecificationCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/aiContractSpecificationAttributeValueChangeEvent": {
            "post": {
                "operationId": "listenToAiContractSpecificationAttributeValueChangeEvent",
                "summary": "Client listener for entity AiContractSpecificationAttributeValueChangeEvent",
                "description": "Example of a client listener for receiving the notification AiContractSpecificationAttributeValueChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/AiContractSpecificationAttributeValueChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/aiContractSpecificationStateChangeEvent": {
            "post": {
                "operationId": "listenToAiContractSpecificationStateChangeEvent",
                "summary": "Client listener for entity AiContractSpecificationStateChangeEvent",
                "description": "Example of a client listener for receiving the notification AiContractSpecificationStateChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/AiContractSpecificationStateChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/aiContractSpecificationDeleteEvent": {
            "post": {
                "operationId": "listenToAiContractSpecificationDeleteEvent",
                "summary": "Client listener for entity AiContractSpecificationDeleteEvent",
                "description": "Example of a client listener for receiving the notification AiContractSpecificationDeleteEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/AiContractSpecificationDeleteEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/topicCreateEvent": {
            "post": {
                "operationId": "listenToTopicCreateEvent",
                "summary": "Client listener for entity TopicCreateEvent",
                "description": "Example of a client listener for receiving the notification TopicCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/TopicCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/topicChangeEvent": {
            "post": {
                "operationId": "listenToTopicChangeEvent",
                "summary": "Client listener for entity TopicChangeEvent",
                "description": "Example of a client listener for receiving the notification TopicChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/TopicChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/topicDeleteEvent": {
            "post": {
                "operationId": "listenToTopicDeleteEvent",
                "summary": "Client listener for entity TopicDeleteEvent",
                "description": "Example of a client listener for receiving the notification TopicDeleteEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/TopicDeleteEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/ackAlarmsCreateEvent": {
            "post": {
                "operationId": "listenToAckAlarmsCreateEvent",
                "summary": "Client listener for entity AckAlarmsCreateEvent",
                "description": "Example of a client listener for receiving the notification AckAlarmsCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/AckAlarmsCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/ackAlarmsStateChangeEvent": {
            "post": {
                "operationId": "listenToAckAlarmsStateChangeEvent",
                "summary": "Client listener for entity AckAlarmsStateChangeEvent",
                "description": "Example of a client listener for receiving the notification AckAlarmsStateChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/AckAlarmsStateChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/unAckAlarmsCreateEvent": {
            "post": {
                "operationId": "listenToUnAckAlarmsCreateEvent",
                "summary": "Client listener for entity UnAckAlarmsCreateEvent",
                "description": "Example of a client listener for receiving the notification UnAckAlarmsCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/UnAckAlarmsCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/unAckAlarmsStateChangeEvent": {
            "post": {
                "operationId": "listenToUnAckAlarmsStateChangeEvent",
                "summary": "Client listener for entity UnAckAlarmsStateChangeEvent",
                "description": "Example of a client listener for receiving the notification UnAckAlarmsStateChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/UnAckAlarmsStateChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/clearAlarmsCreateEvent": {
            "post": {
                "operationId": "listenToClearAlarmsCreateEvent",
                "summary": "Client listener for entity ClearAlarmsCreateEvent",
                "description": "Example of a client listener for receiving the notification ClearAlarmsCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ClearAlarmsCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/clearAlarmsStateChangeEvent": {
            "post": {
                "operationId": "listenToClearAlarmsStateChangeEvent",
                "summary": "Client listener for entity ClearAlarmsStateChangeEvent",
                "description": "Example of a client listener for receiving the notification ClearAlarmsStateChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ClearAlarmsStateChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/commentAlarmsCreateEvent": {
            "post": {
                "operationId": "listenToCommentAlarmsCreateEvent",
                "summary": "Client listener for entity CommentAlarmsCreateEvent",
                "description": "Example of a client listener for receiving the notification CommentAlarmsCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/CommentAlarmsCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/commentAlarmsStateChangeEvent": {
            "post": {
                "operationId": "listenToCommentAlarmsStateChangeEvent",
                "summary": "Client listener for entity CommentAlarmsStateChangeEvent",
                "description": "Example of a client listener for receiving the notification CommentAlarmsStateChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/CommentAlarmsStateChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/groupAlarmsCreateEvent": {
            "post": {
                "operationId": "listenToGroupAlarmsCreateEvent",
                "summary": "Client listener for entity GroupAlarmsCreateEvent",
                "description": "Example of a client listener for receiving the notification GroupAlarmsCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/GroupAlarmsCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/groupAlarmsStateChangeEvent": {
            "post": {
                "operationId": "listenToGroupAlarmsStateChangeEvent",
                "summary": "Client listener for entity GroupAlarmsStateChangeEvent",
                "description": "Example of a client listener for receiving the notification GroupAlarmsStateChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/GroupAlarmsStateChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/unGroupAlarmsCreateEvent": {
            "post": {
                "operationId": "listenToUnGroupAlarmsCreateEvent",
                "summary": "Client listener for entity UnGroupAlarmsCreateEvent",
                "description": "Example of a client listener for receiving the notification UnGroupAlarmsCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/UnGroupAlarmsCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/unGroupAlarmsStateChangeEvent": {
            "post": {
                "operationId": "listenToUnGroupAlarmsStateChangeEvent",
                "summary": "Client listener for entity UnGroupAlarmsStateChangeEvent",
                "description": "Example of a client listener for receiving the notification UnGroupAlarmsStateChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/UnGroupAlarmsStateChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/thresholdJobCreateEvent": {
            "post": {
                "operationId": "listenToThresholdJobCreateEvent",
                "summary": "Client listener for entity ThresholdJobCreateEvent",
                "description": "Example of a client listener for receiving the notification ThresholdJobCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ThresholdJobCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/thresholdJobAttributeValueChangeEvent": {
            "post": {
                "operationId": "listenToThresholdJobAttributeValueChangeEvent",
                "summary": "Client listener for entity ThresholdJobAttributeValueChangeEvent",
                "description": "Example of a client listener for receiving the notification ThresholdJobAttributeValueChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ThresholdJobAttributeValueChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/thresholdJobStateChangeEvent": {
            "post": {
                "operationId": "listenToThresholdJobStateChangeEvent",
                "summary": "Client listener for entity ThresholdJobStateChangeEvent",
                "description": "Example of a client listener for receiving the notification ThresholdJobStateChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ThresholdJobStateChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/thresholdJobDeleteEvent": {
            "post": {
                "operationId": "listenToThresholdJobDeleteEvent",
                "summary": "Client listener for entity ThresholdJobDeleteEvent",
                "description": "Example of a client listener for receiving the notification ThresholdJobDeleteEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ThresholdJobDeleteEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/thresholdRuleCreateEvent": {
            "post": {
                "operationId": "listenToThresholdRuleCreateEvent",
                "summary": "Client listener for entity ThresholdRuleCreateEvent",
                "description": "Example of a client listener for receiving the notification ThresholdRuleCreateEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ThresholdRuleCreateEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/thresholdRuleAttributeValueChangeEvent": {
            "post": {
                "operationId": "listenToThresholdRuleAttributeValueChangeEvent",
                "summary": "Client listener for entity ThresholdRuleAttributeValueChangeEvent",
                "description": "Example of a client listener for receiving the notification ThresholdRuleAttributeValueChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ThresholdRuleAttributeValueChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/thresholdRuleStateChangeEvent": {
            "post": {
                "operationId": "listenToThresholdRuleStateChangeEvent",
                "summary": "Client listener for entity ThresholdRuleStateChangeEvent",
                "description": "Example of a client listener for receiving the notification ThresholdRuleStateChangeEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ThresholdRuleStateChangeEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/listener/thresholdRuleDeleteEvent": {
            "post": {
                "operationId": "listenToThresholdRuleDeleteEvent",
                "summary": "Client listener for entity ThresholdRuleDeleteEvent",
                "description": "Example of a client listener for receiving the notification ThresholdRuleDeleteEvent",
                "tags": [
                    "notification listeners (client side)"
                ],
                "parameters": [
                    {
                        "name": "data",
                        "required": true,
                        "in": "body",
                        "description": "The event data",
                        "schema": {
                            "$ref": "#/definitions/ThresholdRuleDeleteEvent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Notified",
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "405": {
                        "description": "Method Not allowed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "AckAlarms": {
            "type": "object",
            "description": "Task resource for the acknowledge alarms operation",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The identifier of the task"
                },
                "href": {
                    "type": "string",
                    "description": "A reference to the task"
                },
                "ackSystemId": {
                    "type": "string",
                    "description": "Name of the acknowledging system"
                },
                "ackTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the acknowledgement"
                },
                "ackUserId": {
                    "type": "string",
                    "description": "Name of the acknowledging user"
                },
                "state": {
                    "type": "string",
                    "description": "Current state of the operation task"
                },
                "ackedAlarm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmRefOrValue"
                    },
                    "description": "The successfully acknowledged alarms"
                },
                "alarmPattern": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Alarm"
                    },
                    "description": "Alarm patterns to match target alarms. An alarm will match if all of the sttributes in any of the patterns compare equal to those attributes of the alarm."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "AckAlarms_Create": {
            "type": "object",
            "description": "Task resource for the acknowledge alarms operation\nSkipped properties: id,href",
            "required": [
                "ackSystemId",
                "ackUserId",
                "alarmPattern"
            ],
            "properties": {
                "ackSystemId": {
                    "type": "string",
                    "description": "Name of the acknowledging system"
                },
                "ackTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the acknowledgement"
                },
                "ackUserId": {
                    "type": "string",
                    "description": "Name of the acknowledging user"
                },
                "state": {
                    "type": "string",
                    "description": "Current state of the operation task"
                },
                "ackedAlarm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmRefOrValue"
                    },
                    "description": "The successfully acknowledged alarms"
                },
                "alarmPattern": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Alarm"
                    },
                    "minItems": 1,
                    "description": "Alarm patterns to match target alarms. An alarm will match if all of the sttributes in any of the patterns compare equal to those attributes of the alarm."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "Addressable": {
            "type": "object",
            "description": "Base schema for adressable entities",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "AffectedService": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "href": {
                    "type": "string",
                    "description": "Provides the identifier of the service affected by the alarm"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "Agreement": {
            "type": "object",
            "description": "An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
            "required": [
                "agreementItem",
                "agreementType",
                "engagedParty",
                "name"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier for the agreement"
                },
                "href": {
                    "type": "string",
                    "description": "Unique url identifying the agreement as a resource"
                },
                "agreementType": {
                    "type": "string",
                    "description": "The type of the agreement. For example commercial"
                },
                "description": {
                    "type": "string",
                    "description": "Narrative that explains the agreement and details about the it , such as why the agreement is taking place."
                },
                "documentNumber": {
                    "type": "integer",
                    "description": "A reference number assigned to an Agreement that follows a prescribed numbering system."
                },
                "initialDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date at which the agreement was initialized"
                },
                "name": {
                    "type": "string",
                    "description": "A human-readable name for the agreement"
                },
                "statementOfIntent": {
                    "type": "string",
                    "description": "An overview and goals of the Agreement"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of the agreement. Typical values are: in process, approved and rejected"
                },
                "version": {
                    "type": "string",
                    "description": "A string identifying the version of the agreement"
                },
                "agreementAuthorization": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementAuthorization"
                    }
                },
                "agreementItem": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementItem"
                    },
                    "minItems": 1
                },
                "agreementPeriod": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The time period during which the Agreement is in effect."
                },
                "agreementSpecification": {
                    "$ref": "#/definitions/AgreementSpecificationRef"
                },
                "associatedAgreement": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementRef"
                    }
                },
                "characteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }
                },
                "completionDate": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "Date at which the agreement is completed"
                },
                "engagedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "minItems": 1
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "AgreementAuthorization": {
            "type": "object",
            "description": "A business participant that is responsible for approving the agreement.",
            "properties": {
                "date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date associated with the authorization state."
                },
                "signatureRepresentation": {
                    "type": "string",
                    "description": "Indication that represents whether the signature is a physical paper signature or a digital signature."
                },
                "state": {
                    "type": "string",
                    "description": "Current status of the authorization, for example in process, approved, rejected."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "AgreementItem": {
            "type": "object",
            "description": "A part of the agreement expressed in terms of a product offering and possibly including specific terms and conditions.",
            "properties": {
                "product": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProductRef"
                    },
                    "description": "The list of products indirectly referred by this agreement item (since an agreement item refers primarily to product offerings)"
                },
                "productOffering": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProductOfferingRef"
                    },
                    "description": "The list of product offerings referred by this agreement item"
                },
                "termOrCondition": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementTermOrCondition"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "AgreementRef": {
            "type": "object",
            "description": "Agreement reference. An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the agreement"
                },
                "@baseType": {
                    "example": "ResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "example": "LogicalResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "AgreementSpecCharacteristic": {
            "type": "object",
            "description": "A characteristic quality or distinctive feature of an agreement.",
            "properties": {
                "configurable": {
                    "type": "boolean",
                    "description": "If true, the Boolean indicates that the characteristic is configurable"
                },
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the characteristic is"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the characteristic being specified."
                },
                "valueType": {
                    "type": "string",
                    "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
                },
                "specCharacteristicValue": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementSpecCharacteristicValue"
                    }
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the specification characteristic is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "AgreementSpecCharacteristicValue": {
            "type": "object",
            "description": "A number or text that can be assigned to an agreement specification characteristic.",
            "properties": {
                "default": {
                    "type": "boolean",
                    "description": "Indicates if the value is the default value for a characteristic"
                },
                "unitOfMeasure": {
                    "type": "string",
                    "description": "Unit of measure for the characteristic, such as minutes, gigabytes (GB) and so on."
                },
                "valueFrom": {
                    "type": "string",
                    "description": "The low range value that a characteristic can take on"
                },
                "valueTo": {
                    "type": "string",
                    "description": "The upper range value that a characteristic can take on"
                },
                "valueType": {
                    "type": "string",
                    "description": "A kind of value that the characteristic can take on, such as numeric, text, and so forth"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time for which a value is applicable"
                },
                "value": {
                    "$ref": "#/definitions/Any",
                    "description": "A discrete value that the characteristic can take on"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "AgreementSpecification": {
            "type": "object",
            "description": "A template of an agreement that can be used when establishing partnerships",
            "required": [
                "attachment",
                "name"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the agreement specification"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the agreement specification"
                },
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the agreement specification is about"
                },
                "isBundle": {
                    "type": "boolean",
                    "description": "If true, this agreement specification is a grouping of other agreement specifications. The list of bundled agreement specifications is provided by the specificationRelationship property"
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Indicates the current lifecycle status"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the agreement specification"
                },
                "version": {
                    "type": "string",
                    "description": "Agreement specification version"
                },
                "attachment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachmentRefOrValue"
                    },
                    "minItems": 1
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }
                },
                "serviceCategory": {
                    "$ref": "#/definitions/CategoryRef"
                },
                "specificationCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementSpecCharacteristic"
                    }
                },
                "specificationRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementSpecificationRelationship"
                    }
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the agreement specification is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "AgreementSpecificationRef": {
            "type": "object",
            "description": "Agreement specification reference. An AgreementSpecification represents a template of an agreement that can be used when establishing partnerships.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the agreement specification is about."
                },
                "name": {
                    "type": "string",
                    "description": "Name of the agreement specification"
                },
                "@baseType": {
                    "example": "ResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "example": "LogicalResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "AgreementSpecificationRelationship": {
            "type": "object",
            "description": "A relationship between agreement specifications. Typical relationships are substitution and dependency.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "relationshipType": {
                    "type": "string",
                    "description": "Type of relationship such as, substitution or dependency."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the relationship is valid"
                },
                "@baseType": {
                    "example": "ResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "example": "LogicalResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
        "AgreementTermOrCondition": {
            "type": "object",
            "description": "Aspects of the agreement not formally specified elsewhere in the agreement and that cannot be captured elsewhere in a formal notation, or automatically monitored and require a more human level of management.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique number assigned for reference."
                },
                "description": {
                    "type": "string",
                    "description": "Text that explains the term or condition of the agreement."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time during which the term or condition of the agreement applies."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "AiContract": {
            "type": "object",
            "description": "An Ai Contract represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
            "required": [
                "agreementType",
                "name",
                "agreementItem",
                "engagedParty"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "href": {
                    "type": "string"
                },
                "agreementType": {
                    "type": "string",
                    "description": "The type of the agreement. For example commercial"
                },
                "description": {
                    "type": "string"
                },
                "documentNumber": {
                    "type": "integer",
                    "description": "A reference number assigned to an Agreement that follows a prescribed numbering system."
                },
                "initialDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date at which the agreement was initialized"
                },
                "name": {
                    "type": "string"
                },
                "statementOfIntent": {
                    "type": "string",
                    "description": "An overview and goals of the Agreement"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of the agreement. Typical values are: in process, approved and rejected"
                },
                "version": {
                    "type": "string"
                },
                "agreementAuthorization": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementAuthorization"
                    }
                },
                "agreementItem": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementItem"
                    },
                    "minItems": 1
                },
                "agreementPeriod": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The time period during which the Agreement is in effect."
                },
                "agreementSpecification": {
                    "$ref": "#/definitions/AgreementSpecificationRef"
                },
                "associatedAgreement": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementRef"
                    }
                },
                "characteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }
                },
                "completionDate": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "Date at which the agreement is completed"
                },
                "engagedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "minItems": 1
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }
                },
                "rule": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Rule"
                    }
                },
                "template": {
                    "$ref": "#/definitions/Template"
                },
                "validFor": {
                    "$ref": "#/definitions/ValidFor"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "AiContract_Create": {
            "type": "object",
            "description": "An Ai Contract represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.\nSkipped properties: id,href",
            "required": [
                "agreementType",
                "name",
                "agreementItem",
                "engagedParty"
            ],
            "properties": {
                "agreementType": {
                    "type": "string",
                    "description": "The type of the agreement. For example commercial"
                },
                "description": {
                    "type": "string"
                },
                "documentNumber": {
                    "type": "integer",
                    "description": "A reference number assigned to an Agreement that follows a prescribed numbering system."
                },
                "initialDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date at which the agreement was initialized"
                },
                "name": {
                    "type": "string"
                },
                "statementOfIntent": {
                    "type": "string",
                    "description": "An overview and goals of the Agreement"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of the agreement. Typical values are: in process, approved and rejected"
                },
                "version": {
                    "type": "string"
                },
                "agreementAuthorization": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementAuthorization"
                    }
                },
                "agreementItem": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementItem"
                    },
                    "minItems": 1
                },
                "agreementPeriod": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The time period during which the Agreement is in effect."
                },
                "agreementSpecification": {
                    "$ref": "#/definitions/AgreementSpecificationRef"
                },
                "associatedAgreement": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementRef"
                    }
                },
                "characteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }
                },
                "completionDate": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "Date at which the agreement is completed"
                },
                "engagedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "minItems": 1
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }
                },
                "rule": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Rule"
                    }
                },
                "template": {
                    "$ref": "#/definitions/Template"
                },
                "validFor": {
                    "$ref": "#/definitions/ValidFor"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "AiContract_Update": {
            "type": "object",
            "description": "An Ai Contract represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.\nSkipped properties: id,href",
            "required": [
                "agreementType",
                "name",
                "agreementItem",
                "engagedParty"
            ],
            "properties": {
                "agreementType": {
                    "type": "string",
                    "description": "The type of the agreement. For example commercial"
                },
                "description": {
                    "type": "string"
                },
                "documentNumber": {
                    "type": "integer",
                    "description": "A reference number assigned to an Agreement that follows a prescribed numbering system."
                },
                "initialDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date at which the agreement was initialized"
                },
                "name": {
                    "type": "string"
                },
                "statementOfIntent": {
                    "type": "string",
                    "description": "An overview and goals of the Agreement"
                },
                "status": {
                    "type": "string",
                    "description": "The current status of the agreement. Typical values are: in process, approved and rejected"
                },
                "version": {
                    "type": "string"
                },
                "agreementAuthorization": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementAuthorization"
                    }
                },
                "agreementItem": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementItem"
                    },
                    "minItems": 1
                },
                "agreementPeriod": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The time period during which the Agreement is in effect."
                },
                "agreementSpecification": {
                    "$ref": "#/definitions/AgreementSpecificationRef"
                },
                "associatedAgreement": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementRef"
                    }
                },
                "characteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }
                },
                "completionDate": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "Date at which the agreement is completed"
                },
                "engagedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "minItems": 1
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }
                },
                "rule": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Rule"
                    }
                },
                "template": {
                    "$ref": "#/definitions/Template"
                },
                "validFor": {
                    "$ref": "#/definitions/ValidFor"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "AiContractSpecification": {
            "type": "object",
            "description": "A template of an agreement that can be used when establishing partnerships",
            "required": [
                "name",
                "attachment"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the agreement specification"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the agreement specification"
                },
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the agreement specification is about"
                },
                "isBundle": {
                    "type": "boolean",
                    "description": "If true, this agreement specification is a grouping of other agreement specifications. The list of bundled agreement specifications is provided by the specificationRelationship property"
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Indicates the current lifecycle status"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the agreement specification"
                },
                "version": {
                    "type": "string",
                    "description": "Agreement specification version"
                },
                "attachment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachmentRefOrValue"
                    },
                    "minItems": 1
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }
                },
                "serviceCategory": {
                    "$ref": "#/definitions/CategoryRef"
                },
                "specificationCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementSpecCharacteristic"
                    }
                },
                "specificationRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementSpecificationRelationship"
                    }
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the agreement specification is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "AiContractSpecification_Create": {
            "type": "object",
            "description": "A template of an agreement that can be used when establishing partnerships\nSkipped properties: id,href",
            "required": [
                "name",
                "attachment"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the agreement specification is about"
                },
                "isBundle": {
                    "type": "boolean",
                    "description": "If true, this agreement specification is a grouping of other agreement specifications. The list of bundled agreement specifications is provided by the specificationRelationship property"
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Indicates the current lifecycle status"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the agreement specification"
                },
                "version": {
                    "type": "string",
                    "description": "Agreement specification version"
                },
                "attachment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachmentRefOrValue"
                    },
                    "minItems": 1
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }
                },
                "serviceCategory": {
                    "$ref": "#/definitions/CategoryRef"
                },
                "specificationCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementSpecCharacteristic"
                    }
                },
                "specificationRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementSpecificationRelationship"
                    }
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the agreement specification is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "AiContractSpecification_Update": {
            "type": "object",
            "description": "A template of an agreement that can be used when establishing partnerships\nSkipped properties: id,href",
            "required": [
                "name",
                "attachment"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the agreement specification is about"
                },
                "isBundle": {
                    "type": "boolean",
                    "description": "If true, this agreement specification is a grouping of other agreement specifications. The list of bundled agreement specifications is provided by the specificationRelationship property"
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Indicates the current lifecycle status"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the agreement specification"
                },
                "version": {
                    "type": "string",
                    "description": "Agreement specification version"
                },
                "attachment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachmentRefOrValue"
                    },
                    "minItems": 1
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }
                },
                "serviceCategory": {
                    "$ref": "#/definitions/CategoryRef"
                },
                "specificationCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementSpecCharacteristic"
                    }
                },
                "specificationRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AgreementSpecificationRelationship"
                    }
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the agreement specification is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "AiModel": {
            "type": "object",
            "description": "AiModel is a base class for defining the AiModel hierarchy. All AiModel are characterized as either being possibly visible and usable by a Customer or not. This gives rise to the two subclasses of Service: CustomerFacingService and ResourceFacingService.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the service"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the service"
                },
                "category": {
                    "type": "string",
                    "description": "Is it a customer facing or resource facing service"
                },
                "description": {
                    "type": "string",
                    "description": "Free-text description of the model"
                },
                "endDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the service ends"
                },
                "hasStarted": {
                    "type": "boolean",
                    "description": "If TRUE, this Service has already been started"
                },
                "isServiceEnabled": {
                    "type": "boolean",
                    "description": "If FALSE, this particular Service has NOT been enabled for use"
                },
                "isStateful": {
                    "type": "boolean",
                    "description": "If TRUE, this Service can be changed without affecting any other services"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service"
                },
                "serviceDate": {
                    "type": "string",
                    "description": "Date when the service was created (whatever its status)."
                },
                "serviceType": {
                    "type": "string",
                    "description": "Business type of the service"
                },
                "startDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the service starts"
                },
                "startMode": {
                    "type": "string",
                    "description": "This attribute is an enumerated integer that indicates how the Service is started, such as: 0: Unknown; 1: Automatically by the managed environment; 2: Automatically by the owning device; 3: Manually by the Provider of the Service; 4: Manually by a Customer of the Provider; 5: Any of the above"
                },
                "note": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Note"
                    },
                    "description": "A list of notes made on this service"
                },
                "place": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Place"
                    },
                    "description": "A list of places (Place [*]). Used to define a place useful for the service (for example a delivery geographical place)"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity"
                },
                "serviceCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    },
                    "description": "A list of characteristics that characterize this service (ServiceCharacteristic [*]) "
                },
                "serviceRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceRelationship"
                    },
                    "description": "A list of service relationships (ServiceRelationship [*]). Describes links with other service(s) in the inventory (useful for describing relies-on, relies-from between CFS for example)."
                },
                "serviceSpecification": {
                    "$ref": "#/definitions/ServiceSpecificationRef",
                    "description": "The specification from which this service was instantiated"
                },
                "state": {
                    "$ref": "#/definitions/ServiceStateType",
                    "description": "The life cycle state of the service, such as: [feasibilityChecked], [designed]"
                },
                "supportingResource": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceRef"
                    },
                    "description": "A list of supporting resources (SupportingResource [*]).Note: only Service of type RFS can be associated with Resources"
                },
                "supportingService": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceRef"
                    },
                    "description": "A list of supporting services (SupportingService [*]). A collection of services that support this service (bundling, link CFS to RFS)"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "AiModel_Create": {
            "type": "object",
            "description": "AiModel is a base class for defining the AiModel hierarchy. All AiModel are characterized as either being possibly visible and usable by a Customer or not. This gives rise to the two subclasses of Service: CustomerFacingService and ResourceFacingService.\nSkipped properties: id,href",
            "required": [
                "state"
            ],
            "properties": {
                "category": {
                    "type": "string",
                    "description": "Is it a customer facing or resource facing service"
                },
                "description": {
                    "type": "string",
                    "description": "Free-text description of the model"
                },
                "endDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the service ends"
                },
                "hasStarted": {
                    "type": "boolean",
                    "description": "If TRUE, this Service has already been started"
                },
                "isServiceEnabled": {
                    "type": "boolean",
                    "description": "If FALSE, this particular Service has NOT been enabled for use"
                },
                "isStateful": {
                    "type": "boolean",
                    "description": "If TRUE, this Service can be changed without affecting any other services"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service"
                },
                "serviceDate": {
                    "type": "string",
                    "description": "Date when the service was created (whatever its status)."
                },
                "serviceType": {
                    "type": "string",
                    "description": "Business type of the service"
                },
                "startDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the service starts"
                },
                "startMode": {
                    "type": "string",
                    "description": "This attribute is an enumerated integer that indicates how the Service is started, such as: 0: Unknown; 1: Automatically by the managed environment; 2: Automatically by the owning device; 3: Manually by the Provider of the Service; 4: Manually by a Customer of the Provider; 5: Any of the above"
                },
                "note": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Note"
                    },
                    "description": "A list of notes made on this service"
                },
                "place": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Place"
                    },
                    "description": "A list of places (Place [*]). Used to define a place useful for the service (for example a delivery geographical place)"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity"
                },
                "serviceCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    },
                    "description": "A list of characteristics that characterize this service (ServiceCharacteristic [*]) "
                },
                "serviceRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceRelationship"
                    },
                    "description": "A list of service relationships (ServiceRelationship [*]). Describes links with other service(s) in the inventory (useful for describing relies-on, relies-from between CFS for example)."
                },
                "serviceSpecification": {
                    "$ref": "#/definitions/ServiceSpecificationRef",
                    "description": "The specification from which this service was instantiated"
                },
                "state": {
                    "$ref": "#/definitions/ServiceStateType",
                    "description": "The life cycle state of the service, such as: [feasibilityChecked], [designed]"
                },
                "supportingResource": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceRef"
                    },
                    "description": "A list of supporting resources (SupportingResource [*]).Note: only Service of type RFS can be associated with Resources"
                },
                "supportingService": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceRef"
                    },
                    "description": "A list of supporting services (SupportingService [*]). A collection of services that support this service (bundling, link CFS to RFS)"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "AiModel_Update": {
            "type": "object",
            "description": "AiModel is a base class for defining the AiModel hierarchy. All AiModel are characterized as either being possibly visible and usable by a Customer or not. This gives rise to the two subclasses of Service: CustomerFacingService and ResourceFacingService.\nSkipped properties: id,href",
            "properties": {
                "category": {
                    "type": "string",
                    "description": "Is it a customer facing or resource facing service"
                },
                "description": {
                    "type": "string",
                    "description": "Free-text description of the model"
                },
                "endDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the service ends"
                },
                "hasStarted": {
                    "type": "boolean",
                    "description": "If TRUE, this Service has already been started"
                },
                "isServiceEnabled": {
                    "type": "boolean",
                    "description": "If FALSE, this particular Service has NOT been enabled for use"
                },
                "isStateful": {
                    "type": "boolean",
                    "description": "If TRUE, this Service can be changed without affecting any other services"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service"
                },
                "serviceDate": {
                    "type": "string",
                    "description": "Date when the service was created (whatever its status)."
                },
                "serviceType": {
                    "type": "string",
                    "description": "Business type of the service"
                },
                "startDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the service starts"
                },
                "startMode": {
                    "type": "string",
                    "description": "This attribute is an enumerated integer that indicates how the Service is started, such as: 0: Unknown; 1: Automatically by the managed environment; 2: Automatically by the owning device; 3: Manually by the Provider of the Service; 4: Manually by a Customer of the Provider; 5: Any of the above"
                },
                "note": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Note"
                    },
                    "description": "A list of notes made on this service"
                },
                "place": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Place"
                    },
                    "description": "A list of places (Place [*]). Used to define a place useful for the service (for example a delivery geographical place)"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity"
                },
                "serviceCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    },
                    "description": "A list of characteristics that characterize this service (ServiceCharacteristic [*]) "
                },
                "serviceRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceRelationship"
                    },
                    "description": "A list of service relationships (ServiceRelationship [*]). Describes links with other service(s) in the inventory (useful for describing relies-on, relies-from between CFS for example)."
                },
                "serviceSpecification": {
                    "$ref": "#/definitions/ServiceSpecificationRef",
                    "description": "The specification from which this service was instantiated"
                },
                "state": {
                    "$ref": "#/definitions/ServiceStateType",
                    "description": "The life cycle state of the service, such as: [feasibilityChecked], [designed]"
                },
                "supportingResource": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceRef"
                    },
                    "description": "A list of supporting resources (SupportingResource [*]).Note: only Service of type RFS can be associated with Resources"
                },
                "supportingService": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceRef"
                    },
                    "description": "A list of supporting services (SupportingService [*]). A collection of services that support this service (bundling, link CFS to RFS)"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "AiModelSpecification": {
            "type": "object",
            "description": "AiModelSpecification is a class that offers characteristics to describe a type of service.\nFunctionally, it acts as a template by which Services may be instantiated. By sharing the same  specification, these services would therefore share the same set of characteristics.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the service specification"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the service specification"
                },
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the service specification is"
                },
                "isBundle": {
                    "type": "boolean",
                    "description": "isBundle determines whether a ServiceSpecification represents a single ServiceSpecification (false), or a bundle of ServiceSpecification (true)."
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update of the service specification"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status of the service specification"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service specification"
                },
                "version": {
                    "type": "string",
                    "description": "AiModelSpecification version"
                },
                "aiModelSpecCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceSpecCharacteristic"
                    },
                    "description": "A list of service spec characteristics (ServiceSpecCharacteristic [*]). This class represents the key features of this service specification."
                },
                "aiModelSpecRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceSpecRelationship"
                    },
                    "description": "A list of service specifications related to this specification, e.g. migration, substitution, dependency or exclusivity relationship"
                },
                "aiModelSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceLevelSpecificationRef"
                    },
                    "description": "A list of service level specifications related to this service specification, and which will need to be satisifiable for corresponding service instances; e.g. Gold, Platinum"
                },
                "attachment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachmentRef"
                    },
                    "description": "A list of attachments (Attachment [*]). Complements the description of the specification through video, pictures..."
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity."
                },
                "resourceSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecificationRef"
                    },
                    "description": "A list of resource specification references (ResourceSpecificationRef [*]). The ResourceSpecification is required for a service specification with type ResourceFacingServiceSpecification (RFSS)."
                },
                "targetServiceSchema": {
                    "$ref": "#/definitions/TargetServiceSchema",
                    "description": "A target service schema reference (TargetServiceSchemaRef). The reference object to the schema and type of target service which is described by service specification."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the service specification is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "AiModelSpecification_Create": {
            "type": "object",
            "description": "AiModelSpecification is a class that offers characteristics to describe a type of service.\nFunctionally, it acts as a template by which Services may be instantiated. By sharing the same  specification, these services would therefore share the same set of characteristics.\nSkipped properties: id,href",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the service specification is"
                },
                "isBundle": {
                    "type": "boolean",
                    "description": "isBundle determines whether a ServiceSpecification represents a single ServiceSpecification (false), or a bundle of ServiceSpecification (true)."
                },
                "lastUpdate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the last update of the service specification"
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status of the service specification"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service specification"
                },
                "version": {
                    "type": "string",
                    "description": "AiModelSpecification version"
                },
                "aiModelSpecCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceSpecCharacteristic"
                    },
                    "description": "A list of service spec characteristics (ServiceSpecCharacteristic [*]). This class represents the key features of this service specification."
                },
                "aiModelSpecRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceSpecRelationship"
                    },
                    "description": "A list of service specifications related to this specification, e.g. migration, substitution, dependency or exclusivity relationship"
                },
                "aiModelSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceLevelSpecificationRef"
                    },
                    "description": "A list of service level specifications related to this service specification, and which will need to be satisifiable for corresponding service instances; e.g. Gold, Platinum"
                },
                "attachment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachmentRef"
                    },
                    "description": "A list of attachments (Attachment [*]). Complements the description of the specification through video, pictures..."
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity."
                },
                "resourceSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecificationRef"
                    },
                    "description": "A list of resource specification references (ResourceSpecificationRef [*]). The ResourceSpecification is required for a service specification with type ResourceFacingServiceSpecification (RFSS)."
                },
                "targetServiceSchema": {
                    "$ref": "#/definitions/TargetServiceSchema",
                    "description": "A target service schema reference (TargetServiceSchemaRef). The reference object to the schema and type of target service which is described by service specification."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the service specification is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "AiModelSpecification_Update": {
            "type": "object",
            "description": "AiModelSpecification is a class that offers characteristics to describe a type of service.\nFunctionally, it acts as a template by which Services may be instantiated. By sharing the same  specification, these services would therefore share the same set of characteristics.\nSkipped properties: id,href,lastUpdate",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the service specification is"
                },
                "isBundle": {
                    "type": "boolean",
                    "description": "isBundle determines whether a ServiceSpecification represents a single ServiceSpecification (false), or a bundle of ServiceSpecification (true)."
                },
                "lifecycleStatus": {
                    "type": "string",
                    "description": "Used to indicate the current lifecycle status of the service specification"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service specification"
                },
                "version": {
                    "type": "string",
                    "description": "AiModelSpecification version"
                },
                "aiModelSpecCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceSpecCharacteristic"
                    },
                    "description": "A list of service spec characteristics (ServiceSpecCharacteristic [*]). This class represents the key features of this service specification."
                },
                "aiModelSpecRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceSpecRelationship"
                    },
                    "description": "A list of service specifications related to this specification, e.g. migration, substitution, dependency or exclusivity relationship"
                },
                "aiModelSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceLevelSpecificationRef"
                    },
                    "description": "A list of service level specifications related to this service specification, and which will need to be satisifiable for corresponding service instances; e.g. Gold, Platinum"
                },
                "attachment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttachmentRef"
                    },
                    "description": "A list of attachments (Attachment [*]). Complements the description of the specification through video, pictures..."
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity."
                },
                "resourceSpecification": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceSpecificationRef"
                    },
                    "description": "A list of resource specification references (ResourceSpecificationRef [*]). The ResourceSpecification is required for a service specification with type ResourceFacingServiceSpecification (RFSS)."
                },
                "targetServiceSchema": {
                    "$ref": "#/definitions/TargetServiceSchema",
                    "description": "A target service schema reference (TargetServiceSchemaRef). The reference object to the schema and type of target service which is described by service specification."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the service specification is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "Alarm": {
            "type": "object",
            "description": "This resource represents an alarm supporting the information model defined in ITU-T X.733.",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Identifier of the alarm, determined by the alarm owning system"
                },
                "href": {
                    "type": "string",
                    "description": "A reference to the alarm."
                },
                "ackState": {
                    "type": "string",
                    "description": "Provides the Acknowledgement State of the alarm (unacknowledged | acknowledged)."
                },
                "ackSystemId": {
                    "type": "string",
                    "description": "Provides the name of the system that last changed the ackState of an alarm, i.e. acknowledged or unacknowledged the alarm."
                },
                "ackUserId": {
                    "type": "string",
                    "description": "Provides the id of the user who has last changed the ack state of the alarm, i.e. acknowledged or unacknowledged the alarm."
                },
                "alarmChangedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Indicates the last date and time when the alarm is changed on the alarm-owning system. Any change to the alarm whether coming from the alarmed resource, or triggered by a change from the client is changing this time."
                },
                "alarmClearedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Indicates the time (as a date + time) at which the alarm is cleared at the source. "
                },
                "alarmDetails": {
                    "type": "string",
                    "description": "Contains further information on the alarm."
                },
                "alarmEscalation": {
                    "type": "boolean",
                    "description": "Indicates if this alarm has been escalated or not. "
                },
                "alarmRaisedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Indicates the time (as a date + time) at which the alarm occurred at its source."
                },
                "alarmReportingTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Indicates the time (as a date + time) at which the alarm was reported by the owning OSS. It might be different from the alarmRaisedTime. For instance, if the alarm list is maintained by an EMS, the alarmRaisedtime would be the time the alarm\n  was detected by the NE, while the alarmReportingTime would be the time this alarm was stored in the alarm list of the EMS."
                },
                "alarmedObjectType": {
                    "type": "string",
                    "description": "The type (class) of the managed object associated with the event."
                },
                "clearSystemId": {
                    "type": "string",
                    "description": "Provides the id of the system where the user who invoked the alarmCleared operation is located. "
                },
                "clearUserId": {
                    "type": "string",
                    "description": "Provides the id of the user who invoked the alarmCleared operation"
                },
                "externalAlarmId": {
                    "type": "string",
                    "description": "An identifier of the alarm in the source system."
                },
                "isRootCause": {
                    "type": "boolean",
                    "description": "Indicates whether the alarm is a root cause alarm.. "
                },
                "plannedOutageIndicator": {
                    "type": "string",
                    "description": "Indicates that the Managed Object (related to this alarm) is in planned outage (in planned maintenance, or out-of-service). "
                },
                "probableCause": {
                    "type": "string",
                    "description": "Provides the probable cause of the alarm. The values are consistent with ITU-T Recommendation X.733 or 3GPP TS 32.111-2 Annex B."
                },
                "proposedRepairedActions": {
                    "type": "string",
                    "description": "Indicates proposed repair actions, if known to the system emitting the alarm."
                },
                "reportingSystemId": {
                    "type": "string",
                    "description": "Reporting system identity."
                },
                "serviceAffecting": {
                    "type": "boolean",
                    "description": "Indicates whether the alarm affects service or not."
                },
                "sourceSystemId": {
                    "type": "string",
                    "description": "Source system identity."
                },
                "specificProblem": {
                    "type": "string",
                    "description": "Provides more specific information about the alarm."
                },
                "state": {
                    "type": "string",
                    "description": "Defines the alarm state during its life cycle (raised | updated | cleared)."
                },
                "affectedService": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AffectedService"
                    }
                },
                "alarmType": {
                    "$ref": "#/definitions/AlarmType"
                },
                "alarmedObject": {
                    "$ref": "#/definitions/AlarmedObject"
                },
                "comment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Comment"
                    }
                },
                "correlatedAlarm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmRef"
                    }
                },
                "crossedThresholdInformation": {
                    "$ref": "#/definitions/CrossedThresholdInformation"
                },
                "parentAlarm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmRef"
                    }
                },
                "perceivedSeverity": {
                    "$ref": "#/definitions/PerceivedSeverity"
                },
                "place": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedPlaceRefOrValue"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "The base type of this alarm."
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A reference to the schema describing this alarm."
                },
                "@type": {
                    "type": "string",
                    "description": "The type for this alarm."
                }
            }
        },
        "Alarm_Create": {
            "type": "object",
            "description": "This resource represents an alarm supporting the information model defined in ITU-T X.733.\nSkipped properties: id,href",
            "required": [
                "alarmType",
                "perceivedSeverity",
                "probableCause",
                "alarmedObject",
                "sourceSystemId",
                "state",
                "alarmRaisedTime"
            ],
            "properties": {
                "ackState": {
                    "type": "string",
                    "description": "Provides the Acknowledgement State of the alarm (unacknowledged | acknowledged)."
                },
                "ackSystemId": {
                    "type": "string",
                    "description": "Provides the name of the system that last changed the ackState of an alarm, i.e. acknowledged or unacknowledged the alarm."
                },
                "ackUserId": {
                    "type": "string",
                    "description": "Provides the id of the user who has last changed the ack state of the alarm, i.e. acknowledged or unacknowledged the alarm."
                },
                "alarmChangedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Indicates the last date and time when the alarm is changed on the alarm-owning system. Any change to the alarm whether coming from the alarmed resource, or triggered by a change from the client is changing this time."
                },
                "alarmClearedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Indicates the time (as a date + time) at which the alarm is cleared at the source. "
                },
                "alarmDetails": {
                    "type": "string",
                    "description": "Contains further information on the alarm."
                },
                "alarmEscalation": {
                    "type": "boolean",
                    "description": "Indicates if this alarm has been escalated or not. "
                },
                "alarmRaisedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Indicates the time (as a date + time) at which the alarm occurred at its source."
                },
                "alarmReportingTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Indicates the time (as a date + time) at which the alarm was reported by the owning OSS. It might be different from the alarmRaisedTime. For instance, if the alarm list is maintained by an EMS, the alarmRaisedtime would be the time the alarm\n  was detected by the NE, while the alarmReportingTime would be the time this alarm was stored in the alarm list of the EMS."
                },
                "alarmedObjectType": {
                    "type": "string",
                    "description": "The type (class) of the managed object associated with the event."
                },
                "clearSystemId": {
                    "type": "string",
                    "description": "Provides the id of the system where the user who invoked the alarmCleared operation is located. "
                },
                "clearUserId": {
                    "type": "string",
                    "description": "Provides the id of the user who invoked the alarmCleared operation"
                },
                "externalAlarmId": {
                    "type": "string",
                    "description": "An identifier of the alarm in the source system."
                },
                "isRootCause": {
                    "type": "boolean",
                    "description": "Indicates whether the alarm is a root cause alarm.. "
                },
                "plannedOutageIndicator": {
                    "type": "string",
                    "description": "Indicates that the Managed Object (related to this alarm) is in planned outage (in planned maintenance, or out-of-service). "
                },
                "probableCause": {
                    "type": "string",
                    "description": "Provides the probable cause of the alarm. The values are consistent with ITU-T Recommendation X.733 or 3GPP TS 32.111-2 Annex B."
                },
                "proposedRepairedActions": {
                    "type": "string",
                    "description": "Indicates proposed repair actions, if known to the system emitting the alarm."
                },
                "reportingSystemId": {
                    "type": "string",
                    "description": "Reporting system identity."
                },
                "serviceAffecting": {
                    "type": "boolean",
                    "description": "Indicates whether the alarm affects service or not."
                },
                "sourceSystemId": {
                    "type": "string",
                    "description": "Source system identity."
                },
                "specificProblem": {
                    "type": "string",
                    "description": "Provides more specific information about the alarm."
                },
                "state": {
                    "type": "string",
                    "description": "Defines the alarm state during its life cycle (raised | updated | cleared)."
                },
                "affectedService": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AffectedService"
                    }
                },
                "alarmType": {
                    "$ref": "#/definitions/AlarmType"
                },
                "alarmedObject": {
                    "$ref": "#/definitions/AlarmedObject"
                },
                "comment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Comment"
                    }
                },
                "correlatedAlarm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmRef"
                    }
                },
                "crossedThresholdInformation": {
                    "$ref": "#/definitions/CrossedThresholdInformation"
                },
                "parentAlarm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmRef"
                    }
                },
                "perceivedSeverity": {
                    "$ref": "#/definitions/PerceivedSeverity"
                },
                "place": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedPlaceRefOrValue"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "The base type of this alarm."
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A reference to the schema describing this alarm."
                },
                "@type": {
                    "type": "string",
                    "description": "The type for this alarm."
                }
            }
        },
        "Alarm_Update": {
            "type": "object",
            "description": "This resource represents an alarm supporting the information model defined in ITU-T X.733.\nSkipped properties: id,href,alarmRaisedTime,sourceSystemId",
            "properties": {
                "ackState": {
                    "type": "string",
                    "description": "Provides the Acknowledgement State of the alarm (unacknowledged | acknowledged)."
                },
                "ackSystemId": {
                    "type": "string",
                    "description": "Provides the name of the system that last changed the ackState of an alarm, i.e. acknowledged or unacknowledged the alarm."
                },
                "ackUserId": {
                    "type": "string",
                    "description": "Provides the id of the user who has last changed the ack state of the alarm, i.e. acknowledged or unacknowledged the alarm."
                },
                "alarmChangedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Indicates the last date and time when the alarm is changed on the alarm-owning system. Any change to the alarm whether coming from the alarmed resource, or triggered by a change from the client is changing this time."
                },
                "alarmClearedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Indicates the time (as a date + time) at which the alarm is cleared at the source. "
                },
                "alarmDetails": {
                    "type": "string",
                    "description": "Contains further information on the alarm."
                },
                "alarmEscalation": {
                    "type": "boolean",
                    "description": "Indicates if this alarm has been escalated or not. "
                },
                "alarmReportingTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Indicates the time (as a date + time) at which the alarm was reported by the owning OSS. It might be different from the alarmRaisedTime. For instance, if the alarm list is maintained by an EMS, the alarmRaisedtime would be the time the alarm\n  was detected by the NE, while the alarmReportingTime would be the time this alarm was stored in the alarm list of the EMS."
                },
                "alarmedObjectType": {
                    "type": "string",
                    "description": "The type (class) of the managed object associated with the event."
                },
                "clearSystemId": {
                    "type": "string",
                    "description": "Provides the id of the system where the user who invoked the alarmCleared operation is located. "
                },
                "clearUserId": {
                    "type": "string",
                    "description": "Provides the id of the user who invoked the alarmCleared operation"
                },
                "externalAlarmId": {
                    "type": "string",
                    "description": "An identifier of the alarm in the source system."
                },
                "isRootCause": {
                    "type": "boolean",
                    "description": "Indicates whether the alarm is a root cause alarm.. "
                },
                "plannedOutageIndicator": {
                    "type": "string",
                    "description": "Indicates that the Managed Object (related to this alarm) is in planned outage (in planned maintenance, or out-of-service). "
                },
                "probableCause": {
                    "type": "string",
                    "description": "Provides the probable cause of the alarm. The values are consistent with ITU-T Recommendation X.733 or 3GPP TS 32.111-2 Annex B."
                },
                "proposedRepairedActions": {
                    "type": "string",
                    "description": "Indicates proposed repair actions, if known to the system emitting the alarm."
                },
                "reportingSystemId": {
                    "type": "string",
                    "description": "Reporting system identity."
                },
                "serviceAffecting": {
                    "type": "boolean",
                    "description": "Indicates whether the alarm affects service or not."
                },
                "specificProblem": {
                    "type": "string",
                    "description": "Provides more specific information about the alarm."
                },
                "state": {
                    "type": "string",
                    "description": "Defines the alarm state during its life cycle (raised | updated | cleared)."
                },
                "affectedService": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AffectedService"
                    }
                },
                "alarmType": {
                    "$ref": "#/definitions/AlarmType"
                },
                "alarmedObject": {
                    "$ref": "#/definitions/AlarmedObject"
                },
                "comment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Comment"
                    }
                },
                "correlatedAlarm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmRef"
                    }
                },
                "crossedThresholdInformation": {
                    "$ref": "#/definitions/CrossedThresholdInformation"
                },
                "parentAlarm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmRef"
                    }
                },
                "perceivedSeverity": {
                    "$ref": "#/definitions/PerceivedSeverity"
                },
                "place": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedPlaceRefOrValue"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "The base type of this alarm."
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A reference to the schema describing this alarm."
                },
                "@type": {
                    "type": "string",
                    "description": "The type for this alarm."
                }
            }
        },
        "AlarmRef": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "example": "ResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "example": "LogicalResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "AlarmRefOrValue": {
            "type": "object",
            "description": "An alarm defined by reference or value. The polymorphic attributes @type, @schemaLocation & @referredType are related to the alarm entity and not the RelatedAlarmRefOrValue class itself",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Identifier of the alarm, determined by the alarm owning system"
                },
                "href": {
                    "type": "string",
                    "description": "A reference to the alarm."
                },
                "ackState": {
                    "type": "string",
                    "description": "Provides the Acknowledgement State of the alarm (unacknowledged | acknowledged)."
                },
                "ackSystemId": {
                    "type": "string",
                    "description": "Provides the name of the system that last changed the ackState of an alarm, i.e. acknowledged or unacknowledged the alarm."
                },
                "ackUserId": {
                    "type": "string",
                    "description": "Provides the id of the user who has last changed the ack state of the alarm, i.e. acknowledged or unacknowledged the alarm."
                },
                "alarmChangedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Indicates the last date and time when the alarm is changed on the alarm-owning system. Any change to the alarm whether coming from the alarmed resource, or triggered by a change from the client is changing this time."
                },
                "alarmClearedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Indicates the time (as a date + time) at which the alarm is cleared at the source. "
                },
                "alarmDetails": {
                    "type": "string",
                    "description": "Contains further information on the alarm."
                },
                "alarmEscalation": {
                    "type": "boolean",
                    "description": "Indicates if this alarm has been escalated or not. "
                },
                "alarmRaisedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Indicates the time (as a date + time) at which the alarm occurred at its source."
                },
                "alarmReportingTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Indicates the time (as a date + time) at which the alarm was reported by the owning OSS. It might be different from the alarmRaisedTime. For instance, if the alarm list is maintained by an EMS, the alarmRaisedtime would be the time the alarm\n  was detected by the NE, while the alarmReportingTime would be the time this alarm was stored in the alarm list of the EMS."
                },
                "alarmedObjectType": {
                    "type": "string",
                    "description": "The type (class) of the managed object associated with the event."
                },
                "clearSystemId": {
                    "type": "string",
                    "description": "Provides the id of the system where the user who invoked the alarmCleared operation is located. "
                },
                "clearUserId": {
                    "type": "string",
                    "description": "Provides the id of the user who invoked the alarmCleared operation"
                },
                "externalAlarmId": {
                    "type": "string",
                    "description": "An identifier of the alarm in the source system."
                },
                "isRootCause": {
                    "type": "boolean",
                    "description": "Indicates whether the alarm is a root cause alarm.. "
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "plannedOutageIndicator": {
                    "type": "string",
                    "description": "Indicates that the Managed Object (related to this alarm) is in planned outage (in planned maintenance, or out-of-service). "
                },
                "probableCause": {
                    "type": "string",
                    "description": "Provides the probable cause of the alarm. The values are consistent with ITU-T Recommendation X.733 or 3GPP TS 32.111-2 Annex B."
                },
                "proposedRepairedActions": {
                    "type": "string",
                    "description": "Indicates proposed repair actions, if known to the system emitting the alarm."
                },
                "reportingSystemId": {
                    "type": "string",
                    "description": "Reporting system identity."
                },
                "serviceAffecting": {
                    "type": "boolean",
                    "description": "Indicates whether the alarm affects service or not."
                },
                "sourceSystemId": {
                    "type": "string",
                    "description": "Source system identity."
                },
                "specificProblem": {
                    "type": "string",
                    "description": "Provides more specific information about the alarm."
                },
                "state": {
                    "type": "string",
                    "description": "Defines the alarm state during its life cycle (raised | updated | cleared)."
                },
                "affectedService": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AffectedService"
                    }
                },
                "alarmType": {
                    "$ref": "#/definitions/AlarmType"
                },
                "alarmedObject": {
                    "$ref": "#/definitions/AlarmedObject"
                },
                "comment": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Comment"
                    }
                },
                "correlatedAlarm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmRef"
                    }
                },
                "crossedThresholdInformation": {
                    "$ref": "#/definitions/CrossedThresholdInformation"
                },
                "parentAlarm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmRef"
                    }
                },
                "perceivedSeverity": {
                    "$ref": "#/definitions/PerceivedSeverity"
                },
                "place": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedPlaceRefOrValue"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "The base type of this alarm."
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "A reference to the schema describing this alarm."
                },
                "@type": {
                    "type": "string",
                    "description": "The type for this alarm."
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
        "AlarmType": {
            "type": "string",
            "description": "Categorizes the alarm (X.733 8.1.1, 3GPP TS 32.111-2 Annex A)",
            "enum": [
                "communicationsAlarm",
                "processingErrorAlarm",
                "environmentalAlarm",
                "qualityOfServiceAlarm",
                "equipmentAlarm",
                "integrityViolation",
                "operationalViolation",
                "physicalViolation",
                "securityService",
                "mechanismViolation",
                "timeDomainViolation"
            ]
        },
        "AlarmedObject": {
            "type": "object",
            "description": "Identifies the managed object instance associated with the alarm.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The identifier of the managed object associated with the event."
                },
                "href": {
                    "type": "string",
                    "description": "A reference to the managed object associated with the event."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "Any": {},
        "Attachment": {
            "type": "object",
            "description": "Complements the description of an element (for instance a product) through video, pictures...",
            "properties": {
                "id": {
                    "example": "4aafacbd-11ff-4dc8-b445-305f2215715f",
                    "type": "string",
                    "description": "Unique identifier for this particular attachment"
                },
                "href": {
                    "example": "http://host/Attachment/4aafacbd-11ff-4dc8-b445-305f2215715f",
                    "type": "string",
                    "format": "uri",
                    "description": "URI for this Attachment"
                },
                "attachmentType": {
                    "example": "video",
                    "type": "string",
                    "description": "Attachment type such as video, picture"
                },
                "content": {
                    "type": "string",
                    "format": "base64",
                    "description": "The actual contents of the attachment object, if embedded, encoded as base64"
                },
                "description": {
                    "example": "Photograph of the Product",
                    "type": "string",
                    "description": "A narrative text describing the content of the attachment"
                },
                "mimeType": {
                    "type": "string",
                    "description": "Attachment mime type such as extension file for video, picture and document"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the attachment"
                },
                "url": {
                    "example": "http://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f",
                    "type": "string",
                    "format": "uri",
                    "description": "Uniform Resource Locator, is a web page address (a subset of URI)"
                },
                "size": {
                    "$ref": "#/definitions/Quantity",
                    "description": "The size of the attachment."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time for which the attachment is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "AttachmentRef": {
            "type": "object",
            "description": "Attachment reference. An attachment complements the description of an element (for instance a product) through video, pictures",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique-Identifier for this attachment"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "URL serving as reference for the attachment resource"
                },
                "description": {
                    "type": "string",
                    "description": "A narrative text describing the content of the attachment"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "Link to the attachment media/content"
                },
                "@baseType": {
                    "example": "ResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "example": "LogicalResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "AttachmentRefOrValue": {
            "type": "object",
            "description": "An attachment by value or by reference. An attachment complements the description of an element, for example through a document, a video, a picture.",
            "properties": {
                "id": {
                    "example": "4aafacbd-11ff-4dc8-b445-305f2215715f",
                    "type": "string",
                    "description": "Unique identifier for this particular attachment"
                },
                "href": {
                    "example": "http://host/Attachment/4aafacbd-11ff-4dc8-b445-305f2215715f",
                    "type": "string",
                    "format": "uri",
                    "description": "URI for this Attachment"
                },
                "attachmentType": {
                    "example": "video",
                    "type": "string",
                    "description": "Attachment type such as video, picture"
                },
                "content": {
                    "type": "string",
                    "format": "base64",
                    "description": "The actual contents of the attachment object, if embedded, encoded as base64"
                },
                "description": {
                    "example": "Photograph of the Product",
                    "type": "string",
                    "description": "A narrative text describing the content of the attachment"
                },
                "mimeType": {
                    "type": "string",
                    "description": "Attachment mime type such as extension file for video, picture and document"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the attachment"
                },
                "url": {
                    "example": "http://host/Content/4aafacbd-11ff-4dc8-b445-305f2215715f",
                    "type": "string",
                    "format": "uri",
                    "description": "Uniform Resource Locator, is a web page address (a subset of URI)"
                },
                "size": {
                    "$ref": "#/definitions/Quantity",
                    "description": "The size of the attachment."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time for which the attachment is valid"
                },
                "@baseType": {
                    "example": "ResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "example": "LogicalResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
        "BaseService": {
            "type": "object",
            "description": "In the context of a service order and depending on the action requested (add/modify/delete/noChange) this data structure captures the configuration to apply to an existing subscribed service or to a new one",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the service"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the service"
                },
                "category": {
                    "type": "string",
                    "description": "Is it a customer facing or resource facing service"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service"
                },
                "serviceType": {
                    "type": "string",
                    "description": "Business type of the service"
                },
                "place": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Place"
                    },
                    "description": "A list of places (Place [*]). Used to define a place useful for the service (for example a delivery geographical place)"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity"
                },
                "serviceCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    },
                    "description": "A list of characteristics that characterize this service (ServiceCharacteristic [*]) "
                },
                "serviceRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceRelationship"
                    },
                    "description": "A list of service relationships (ServiceRelationship [*]). Describes links with other service(s) in the inventory (useful for describing relies-on, relies-from between CFS for example)."
                },
                "serviceSpecification": {
                    "$ref": "#/definitions/ServiceSpecificationRef",
                    "description": "The specification from which this service was instantiated"
                },
                "state": {
                    "$ref": "#/definitions/ServiceStateType",
                    "description": "The life cycle state of the service, such as: [feasibilityChecked], [designed]"
                },
                "supportingResource": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceRef"
                    },
                    "description": "A list of supporting resources (SupportingResource [*]).Note: only Service of type RFS can be associated with Resources"
                },
                "supportingService": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceRef"
                    },
                    "description": "A list of supporting services (SupportingService [*]). A collection of services that support this service (bundling, link CFS to RFS)"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "CategoryRef": {
            "type": "object",
            "description": "The category for grouping recommendations",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "version": {
                    "type": "string",
                    "description": "Category version"
                },
                "@baseType": {
                    "example": "ResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "example": "LogicalResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "Characteristic": {
            "type": "object",
            "description": "Describes a given characteristic of an object or entity through a name/value pair.",
            "required": [
                "name",
                "value"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the characteristic"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the characteristic"
                },
                "valueType": {
                    "type": "string",
                    "description": "Data type of the value of the characteristic"
                },
                "characteristicRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CharacteristicRelationship"
                    }
                },
                "value": {
                    "$ref": "#/definitions/Any",
                    "description": "The value of the characteristic"
                },
                "@baseType": {
                    "example": "ResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "example": "LogicalResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "CharacteristicRelationship": {
            "type": "object",
            "description": "Another Characteristic that is related to the current Characteristic;",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the characteristic"
                },
                "relationshipType": {
                    "type": "string",
                    "description": "The type of relationship"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ClearAlarms": {
            "type": "object",
            "description": "Task resource for clear alarms operation",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The identifier of the task"
                },
                "href": {
                    "type": "string",
                    "description": "A reference to the task"
                },
                "alarmClearedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the alarm clearing"
                },
                "clearSystemId": {
                    "type": "string",
                    "description": "Name of the clearing system"
                },
                "clearUserId": {
                    "type": "string",
                    "description": "Name of the clearing user"
                },
                "state": {
                    "type": "string",
                    "description": "Current state of the operation task"
                },
                "alarmPattern": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Alarm"
                    },
                    "description": "Alarm patterns to match target alarms. An alarm will match if all of the sttributes in any of the patterns compare equal to those attributes of the alarm."
                },
                "clearedAlarm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmRefOrValue"
                    },
                    "description": "The successfully cleared alarms"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ClearAlarms_Create": {
            "type": "object",
            "description": "Task resource for clear alarms operation\nSkipped properties: id,href",
            "required": [
                "clearSystemId",
                "clearUserId",
                "alarmClearedTime",
                "alarmPattern"
            ],
            "properties": {
                "alarmClearedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the alarm clearing"
                },
                "clearSystemId": {
                    "type": "string",
                    "description": "Name of the clearing system"
                },
                "clearUserId": {
                    "type": "string",
                    "description": "Name of the clearing user"
                },
                "state": {
                    "type": "string",
                    "description": "Current state of the operation task"
                },
                "alarmPattern": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Alarm"
                    },
                    "minItems": 1,
                    "description": "Alarm patterns to match target alarms. An alarm will match if all of the sttributes in any of the patterns compare equal to those attributes of the alarm."
                },
                "clearedAlarm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmRefOrValue"
                    },
                    "description": "The successfully cleared alarms"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "Comment": {
            "type": "object",
            "description": "Indicates the comments entered on the alarm.",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Indicates the text of the comment."
                },
                "systemId": {
                    "type": "string",
                    "description": "Indicates the system identifier on which the client set the comment."
                },
                "time": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Indicates the time commenting the alarm"
                },
                "userId": {
                    "type": "string",
                    "description": "Indicates the user commenting the alarm."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "CommentAlarms": {
            "type": "object",
            "description": "Task resource for comment alarms operation",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The identifier of the task"
                },
                "href": {
                    "type": "string",
                    "description": "A reference to the task"
                },
                "state": {
                    "type": "string",
                    "description": "Current state of the operation task"
                },
                "alarmPattern": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Alarm"
                    },
                    "description": "Alarm patterns to match target alarms. An alarm will match if all of the sttributes in any of the patterns compare equal to those attributes of the alarm."
                },
                "comment": {
                    "$ref": "#/definitions/Comment"
                },
                "commentedAlarm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmRefOrValue"
                    },
                    "description": "The successfully commented alarms"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "CommentAlarms_Create": {
            "type": "object",
            "description": "Task resource for comment alarms operation\nSkipped properties: id,href",
            "required": [
                "comment",
                "alarmPattern"
            ],
            "properties": {
                "state": {
                    "type": "string",
                    "description": "Current state of the operation task"
                },
                "alarmPattern": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Alarm"
                    },
                    "minItems": 1,
                    "description": "Alarm patterns to match target alarms. An alarm will match if all of the sttributes in any of the patterns compare equal to those attributes of the alarm."
                },
                "comment": {
                    "$ref": "#/definitions/Comment"
                },
                "commentedAlarm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmRefOrValue"
                    },
                    "description": "The successfully commented alarms"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ConstraintRef": {
            "type": "object",
            "description": "Constraint reference. The Constraint resource represents a policy/rule applied to an entity or entity spec.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "reference id to the target constraint"
                },
                "href": {
                    "type": "string",
                    "description": "Hyperlink reference to the target constraint"
                },
                "name": {
                    "type": "string",
                    "description": "Name given to the constraint"
                },
                "version": {
                    "type": "string",
                    "description": "constraint version"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The (class) type of the referred constraint"
                }
            },
            "required": [
                "id"
            ]
        },
        "CrossedThresholdInformation": {
            "type": "object",
            "description": "Identifies the details of the threshold that has been crossed.",
            "properties": {
                "direction": {
                    "type": "string",
                    "description": "Indicates the threshold crossing direction: up or down."
                },
                "granularity": {
                    "type": "string",
                    "description": "Indicates the granularity at which the indicator is evaluated for threshold crossing"
                },
                "indicatorName": {
                    "type": "string",
                    "description": "Indicates the name of indicator which crossed the threshold."
                },
                "indicatorUnit": {
                    "type": "string",
                    "description": "Indicates the unit of the measurement of the indicator corresponding to the threshold that has been crossed."
                },
                "observedValue": {
                    "type": "string",
                    "description": "Indicates the value of the indicator which crossed the threshold."
                },
                "thresholdCrossingDescription": {
                    "type": "string",
                    "description": "Indicates further information on the threshold crossing alarm."
                },
                "threshold": {
                    "$ref": "#/definitions/ThresholdRef"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "EntityRef": {
            "type": "object",
            "description": "Entity reference schema to be use for all entityRef class.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "example": "ResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "example": "LogicalResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "EntityValue": {
            "type": "object",
            "description": "Base entity value  schema for use in TMForum Open-APIs",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of a related entity."
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the related entity."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "Event": {
            "type": "object",
            "description": "event with common attributes.",
            "properties": {
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "analyticCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }
                },
                "event": {
                    "$ref": "#/definitions/Any",
                    "description": "The event linked to the involved resource object"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }
                },
                "reportingSystem": {
                    "$ref": "#/definitions/EntityRef",
                    "description": "Reporting System described by EntityRef"
                },
                "source": {
                    "$ref": "#/definitions/EntityRef",
                    "description": "Source Entity described by EntityRef"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "Event_Create": {
            "type": "object",
            "description": "event with common attributes.\nSkipped properties: id,href",
            "properties": {
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "analyticCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }
                },
                "event": {
                    "$ref": "#/definitions/Any",
                    "description": "The event linked to the involved resource object"
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }
                },
                "reportingSystem": {
                    "$ref": "#/definitions/EntityRef",
                    "description": "Reporting System described by EntityRef"
                },
                "source": {
                    "$ref": "#/definitions/EntityRef",
                    "description": "Source Entity described by EntityRef"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "Extensible": {
            "type": "object",
            "description": "Base Extensible schema for use in TMForum Open-APIs",
            "properties": {
                "@baseType": {
                    "example": "ResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "example": "LogicalResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                }
            }
        },
        "Feature": {
            "type": "object",
            "description": "Configuration feature.",
            "required": [
                "featureCharacteristic",
                "name"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the feature."
                },
                "isBundle": {
                    "type": "boolean",
                    "description": "True if this is a feature group. Default is false."
                },
                "isEnabled": {
                    "type": "boolean",
                    "description": "True if this feature is enabled. Default is true."
                },
                "name": {
                    "type": "string",
                    "description": "This is the name for the feature."
                },
                "constraint": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ConstraintRef"
                    },
                    "description": "This is a list of feature constraints."
                },
                "featureCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    },
                    "minItems": 1,
                    "description": "This is a list of Characteristics for a particular feature."
                },
                "featureRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FeatureRelationship"
                    }
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "FeatureRelationship": {
            "type": "object",
            "description": "Configuration feature",
            "required": [
                "name",
                "relationshipType"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the target feature."
                },
                "name": {
                    "type": "string",
                    "description": "This is the name of the target feature."
                },
                "relationshipType": {
                    "type": "string",
                    "description": "This is the type of the feature relationship."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which this feature relationship is valid."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "GroupAlarms": {
            "type": "object",
            "description": "Task resource for group alarms operation",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The identifier of the task"
                },
                "href": {
                    "type": "string",
                    "description": "A reference to the task"
                },
                "alarmChangedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the correlation"
                },
                "sourceSystemId": {
                    "type": "string",
                    "description": "Source system identifier"
                },
                "state": {
                    "type": "string",
                    "description": "Current state of the operation task"
                },
                "correlatedAlarm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmRefOrValue"
                    },
                    "description": "Correlated alarms"
                },
                "groupedAlarm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmRefOrValue"
                    },
                    "description": "The successfully correlated alarms"
                },
                "parentAlarm": {
                    "$ref": "#/definitions/AlarmRefOrValue",
                    "description": "Root cause alarm"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "GroupAlarms_Create": {
            "type": "object",
            "description": "Task resource for group alarms operation\nSkipped properties: id,href",
            "required": [
                "sourceSystemId",
                "alarmChangedTime",
                "parentAlarm",
                "correlatedAlarm"
            ],
            "properties": {
                "alarmChangedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the correlation"
                },
                "sourceSystemId": {
                    "type": "string",
                    "description": "Source system identifier"
                },
                "state": {
                    "type": "string",
                    "description": "Current state of the operation task"
                },
                "correlatedAlarm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmRefOrValue"
                    },
                    "minItems": 1,
                    "description": "Correlated alarms"
                },
                "groupedAlarm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmRefOrValue"
                    },
                    "description": "The successfully correlated alarms"
                },
                "parentAlarm": {
                    "$ref": "#/definitions/AlarmRefOrValue",
                    "description": "Root cause alarm"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "Hub": {
            "type": "object",
            "description": "A Hub is used to subscribe to an event notification",
            "required": [
                "callback",
                "id"
            ],
            "properties": {
                "id": {
                    "example": "4aafacbd-11ff-4dc8-b445-305f2215715f",
                    "type": "string",
                    "description": "The unique-id for your subscription - referenced when updating or deleting a subscription"
                },
                "callback": {
                    "example": "http://host/resource/id/listener",
                    "type": "string",
                    "format": "uri",
                    "description": "The URI that will be POSTed to when a notification is triggered"
                },
                "query": {
                    "example": "status=active",
                    "type": "string",
                    "description": "This is a query string used to filter notifications in the context of the notifier"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "Hub_Create": {
            "type": "object",
            "description": "A Hub is used to subscribe to an event notification\nSkipped properties: id,href",
            "required": [
                "callback",
                "id"
            ],
            "properties": {
                "callback": {
                    "example": "http://host/resource/id/listener",
                    "type": "string",
                    "format": "uri",
                    "description": "The URI that will be POSTed to when a notification is triggered"
                },
                "query": {
                    "example": "status=active",
                    "type": "string",
                    "description": "This is a query string used to filter notifications in the context of the notifier"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "Note": {
            "type": "object",
            "description": "Extra information about a given entity",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Identifier of the note within its containing entity (may or may not be globally unique, depending on provider implementation)"
                },
                "author": {
                    "type": "string",
                    "description": "Author of the note"
                },
                "date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date of the note"
                },
                "text": {
                    "type": "string",
                    "description": "Text of the note"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "OrderItemActionType": {
            "type": "string",
            "description": "action to be performed on the product",
            "enum": [
                "add",
                "modify",
                "delete",
                "noChange"
            ]
        },
        "PerceivedSeverity": {
            "type": "string",
            "description": "This datatype lists the possible severities that can be allocated to a Alarm. The values are consistent with ITU-T Recommendation X.733. This specification does not recommend the use of indeterminate.",
            "enum": [
                "CRITICAL",
                "MAJOR",
                "MINOR",
                "WARNING",
                "INDETERMINATE",
                "CLEARED"
            ]
        },
        "PerformanceAlarmSpecification": {
            "type": "object",
            "description": "The specification of how to populate the alarm fields when generating a threshold crossing alarm.",
            "properties": {
                "perfAlarmSpecAdditionalText": {
                    "type": "string"
                },
                "perfAlarmSpecAlarmType": {
                    "type": "string"
                },
                "perfAlarmSpecSpecificProblem": {
                    "type": "string"
                },
                "perfAlarmThresholdCrossingDescription": {
                    "type": "string"
                },
                "perfeAlarmSpecProbableCause": {
                    "type": "string"
                },
                "perfAlarmSpecSeverity": {
                    "$ref": "#/definitions/PerceivedSeverity"
                },
                "performanceConsequence": {
                    "$ref": "#/definitions/PerformanceConsequence"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "PerformanceConsequence": {
            "type": "object",
            "description": "A Consequence can be applied as a result of a threshold crossing or a threshold ceasing to be crossed",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "prescribedAction": {
                    "type": "string"
                },
                "alarmSpecification": {
                    "$ref": "#/definitions/PerformanceAlarmSpecification"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "Place": {
            "type": "object",
            "description": "Place reference. Place defines the places where the products are sold or delivered.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the place"
                },
                "href": {
                    "type": "string",
                    "description": "Unique reference of the place"
                },
                "name": {
                    "type": "string",
                    "description": "A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "PlaceRef": {
            "type": "object",
            "description": "Place reference. PlaceRef defines the placeRefs where the products are sold or delivered.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "example": "ResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "example": "LogicalResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "ProductOfferingRef": {
            "type": "object",
            "description": "ProductOffering reference. A product offering represents entities that are orderable from the provider of the catalog, this resource includes pricing information.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "example": "ResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "example": "LogicalResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "ProductRef": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "example": "ResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "example": "LogicalResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "Quantity": {
            "type": "object",
            "description": "An amount in a given unit",
            "properties": {
                "amount": {
                    "default": 1,
                    "type": "number",
                    "format": "float",
                    "description": "Numeric value in a given unit"
                },
                "units": {
                    "type": "string",
                    "description": "Unit"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "RelatedEntityRefOrValue": {
            "type": "object",
            "description": "A reference to an entity, where the type of the entity is not known in advance. A related entity defines a entity described by reference or by value linked to a specific entity. The polymorphic attributes @type, @schemaLocation & @referredType are related to the Entity and not the RelatedEntityRefOrValue class itself",
            "required": [
                "role"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of a related entity."
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the related entity."
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "role": {
                    "type": "string"
                },
                "@baseType": {
                    "example": "ResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "example": "LogicalResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
        "RelatedParty": {
            "type": "object",
            "description": "Related Entity reference. A related party defines party or party role linked to a specific entity.",
            "required": [
                "@referredType",
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "role": {
                    "type": "string",
                    "description": "Role played by the related party"
                },
                "@baseType": {
                    "example": "ResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "example": "LogicalResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
        "RelatedPlaceRefOrValue": {
            "type": "object",
            "description": "Related Entity reference. A related place defines a place described by reference or by value linked to a specific entity. The polymorphic attributes @type, @schemaLocation & @referredType are related to the place entity and not the RelatedPlaceRefOrValue class itself",
            "required": [
                "role"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the place"
                },
                "href": {
                    "type": "string",
                    "description": "Unique reference of the place"
                },
                "name": {
                    "type": "string",
                    "description": "A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]"
                },
                "role": {
                    "type": "string"
                },
                "@baseType": {
                    "example": "ResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "example": "LogicalResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
        "RelatedServiceOrderItem": {
            "type": "object",
            "description": "RelatedServiceOrderItem (a ServiceOrder item) .The service order item which triggered service creation/change/termination.",
            "required": [
                "itemId",
                "serviceOrderId"
            ],
            "properties": {
                "itemId": {
                    "type": "string",
                    "description": "Identifier of the order item where the service was managed"
                },
                "role": {
                    "type": "string",
                    "description": "role of the service order item for this service"
                },
                "serviceOrderHref": {
                    "type": "string",
                    "description": "Reference of the related entity."
                },
                "serviceOrderId": {
                    "type": "string",
                    "description": "Unique identifier of a related entity."
                },
                "itemAction": {
                    "$ref": "#/definitions/OrderItemActionType",
                    "description": "Action of the order item for this service"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
        "ResourceRef": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "example": "ResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "example": "LogicalResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "ResourceSpecificationRef": {
            "type": "object",
            "description": "Resources are physical or non-physical components (or some combination of these) within an enterprise's infrastructure or inventory. They are typically consumed or used by services (for example a physical port assigned to a service) or contribute to the realization of a Product (for example, a SIM card). They can be drawn from the Application, Computing and Network domains, and include, for example, Network Elements, software, IT systems, content and information, and technology components.\nA ResourceSpecification is an abstract base class for representing a generic means for implementing a particular type of Resource. In essence, a ResourceSpecification defines the common attributes and relationships of a set of related Resources, while Resource defines a specific instance that is based on a particular ResourceSpecification.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "version": {
                    "type": "string",
                    "description": "Resource Specification version"
                },
                "@baseType": {
                    "example": "ResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "example": "LogicalResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "Rule": {
            "type": "object",
            "properties": {
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "Service": {
            "type": "object",
            "description": "Service is a base class for defining the Service hierarchy. All Services are characterized as either being possibly visible and usable by a Customer or not. This gives rise to the two subclasses of Service: CustomerFacingService and ResourceFacingService.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the service"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the service"
                },
                "category": {
                    "type": "string",
                    "description": "Is it a customer facing or resource facing service"
                },
                "description": {
                    "type": "string",
                    "description": "Free-text description of the service"
                },
                "endDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the service ends"
                },
                "hasStarted": {
                    "type": "boolean",
                    "description": "If TRUE, this Service has already been started"
                },
                "isBundle": {
                    "type": "boolean",
                    "description": "If true, the service is a ServiceBundle which regroup a service hierachy. If false, the service is a 'atomic' service (hierachy leaf)."
                },
                "isServiceEnabled": {
                    "type": "boolean",
                    "description": "If FALSE and hasStarted is FALSE, this particular Service has NOT been enabled for use - if FALSE and hasStarted is TRUE then the service has failed "
                },
                "isStateful": {
                    "type": "boolean",
                    "description": "If TRUE, this Service can be changed without affecting any other services"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service"
                },
                "serviceDate": {
                    "type": "string",
                    "description": "Date when the service was created (whatever its status)."
                },
                "serviceType": {
                    "type": "string",
                    "description": "Business type of the service"
                },
                "startDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the service starts"
                },
                "startMode": {
                    "type": "string",
                    "description": "This attribute is an enumerated integer that indicates how the Service is started, such as: 0: Unknown; 1: Automatically by the managed environment; 2: Automatically by the owning device; 3: Manually by the Provider of the Service; 4: Manually by a Customer of the Provider; 5: Any of the above"
                },
                "feature": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Feature"
                    },
                    "description": "A list of feature associated with this service "
                },
                "note": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Note"
                    },
                    "description": "A list of notes made on this service"
                },
                "place": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedPlaceRefOrValue"
                    },
                    "description": "A list of places (Place [*]). Used to define a place useful for the service (for example a geographical place whre the service is installed)"
                },
                "relatedEntity": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedEntityRefOrValue"
                    },
                    "description": "A list of related  entity in relationship with this service "
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity"
                },
                "serviceCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    },
                    "description": "A list of characteristics that characterize this service (ServiceCharacteristic [*]) "
                },
                "serviceOrderItem": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedServiceOrderItem"
                    },
                    "description": "A list of service order items related to this service"
                },
                "serviceRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceRelationship"
                    },
                    "description": "A list of service relationships (ServiceRelationship [*]). Describes links with other service(s) in the inventory."
                },
                "serviceSpecification": {
                    "$ref": "#/definitions/ServiceSpecificationRef",
                    "description": "The specification from which this service was instantiated"
                },
                "state": {
                    "$ref": "#/definitions/ServiceStateType",
                    "description": "The life cycle state of the service, such as designed, reserved, active, etc..."
                },
                "supportingResource": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceRef"
                    },
                    "description": "A list of supporting resources (SupportingResource [*]).Note: only Service of type RFS can be associated with Resources"
                },
                "supportingService": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceRefOrValue"
                    },
                    "description": "A list of supporting services (SupportingService [*]). A collection of services that support this service (bundling, link CFS to RFS)"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ServiceLevelSpecificationRef": {
            "type": "object",
            "description": "A Service Level Specification represents a pre-defined or negotiated set of Service Level \nObjectives. In addition, certain consequences are associated with not meeting the Service Level \nObjectives. Service Level Agreements are expressed in terms of Service Level Specifications.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The identifier to a service level specification."
                },
                "href": {
                    "type": "string",
                    "description": "The hyperlink to access a service level specification."
                },
                "name": {
                    "type": "string",
                    "description": "The name of Service Level Specification"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "ServiceRef": {
            "type": "object",
            "description": "Service reference, for when Service is used by other entities",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "example": "ResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "example": "LogicalResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "ServiceRefOrValue": {
            "type": "object",
            "description": "A Service to be created defined by value or existing defined by reference. The polymorphic attributes @type, @schemaLocation & @referredType are related to the Service entity and not the RelatedServiceRefOrValue class itself",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the service"
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the service"
                },
                "category": {
                    "type": "string",
                    "description": "Is it a customer facing or resource facing service"
                },
                "description": {
                    "type": "string",
                    "description": "Free-text description of the service"
                },
                "endDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the service ends"
                },
                "hasStarted": {
                    "type": "boolean",
                    "description": "If TRUE, this Service has already been started"
                },
                "isBundle": {
                    "type": "boolean",
                    "description": "If true, the service is a ServiceBundle which regroup a service hierachy. If false, the service is a 'atomic' service (hierachy leaf)."
                },
                "isServiceEnabled": {
                    "type": "boolean",
                    "description": "If FALSE and hasStarted is FALSE, this particular Service has NOT been enabled for use - if FALSE and hasStarted is TRUE then the service has failed "
                },
                "isStateful": {
                    "type": "boolean",
                    "description": "If TRUE, this Service can be changed without affecting any other services"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service"
                },
                "serviceDate": {
                    "type": "string",
                    "description": "Date when the service was created (whatever its status)."
                },
                "serviceType": {
                    "type": "string",
                    "description": "Business type of the service"
                },
                "startDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when the service starts"
                },
                "startMode": {
                    "type": "string",
                    "description": "This attribute is an enumerated integer that indicates how the Service is started, such as: 0: Unknown; 1: Automatically by the managed environment; 2: Automatically by the owning device; 3: Manually by the Provider of the Service; 4: Manually by a Customer of the Provider; 5: Any of the above"
                },
                "feature": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Feature"
                    },
                    "description": "A list of feature associated with this service "
                },
                "note": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Note"
                    },
                    "description": "A list of notes made on this service"
                },
                "place": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedPlaceRefOrValue"
                    },
                    "description": "A list of places (Place [*]). Used to define a place useful for the service (for example a geographical place whre the service is installed)"
                },
                "relatedEntity": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedEntityRefOrValue"
                    },
                    "description": "A list of related  entity in relationship with this service "
                },
                "relatedParty": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    },
                    "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity"
                },
                "serviceCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    },
                    "description": "A list of characteristics that characterize this service (ServiceCharacteristic [*]) "
                },
                "serviceOrderItem": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelatedServiceOrderItem"
                    },
                    "description": "A list of service order items related to this service"
                },
                "serviceRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceRelationship"
                    },
                    "description": "A list of service relationships (ServiceRelationship [*]). Describes links with other service(s) in the inventory."
                },
                "serviceSpecification": {
                    "$ref": "#/definitions/ServiceSpecificationRef",
                    "description": "The specification from which this service was instantiated"
                },
                "state": {
                    "$ref": "#/definitions/ServiceStateType",
                    "description": "The life cycle state of the service, such as designed, reserved, active, etc..."
                },
                "supportingResource": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResourceRef"
                    },
                    "description": "A list of supporting resources (SupportingResource [*]).Note: only Service of type RFS can be associated with Resources"
                },
                "supportingService": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceRefOrValue"
                    },
                    "description": "A list of supporting services (SupportingService [*]). A collection of services that support this service (bundling, link CFS to RFS)"
                },
                "@baseType": {
                    "example": "ResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "example": "LogicalResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        },
        "ServiceRelationship": {
            "type": "object",
            "required": [
                "relationshipType"
            ],
            "properties": {
                "relationshipType": {
                    "type": "string"
                },
                "ServiceRelationshipCharacteristic": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }
                },
                "service": {
                    "$ref": "#/definitions/ServiceRefOrValue"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ServiceSpecCharRelationship": {
            "type": "object",
            "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among serviceSpecCharacteristics.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the target specification"
                },
                "href": {
                    "type": "string",
                    "description": "Hyperlink reference to the target specification"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the target  characteristic"
                },
                "relationshipType": {
                    "type": "string",
                    "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
                },
                "role": {
                    "type": "string",
                    "description": "The association role for this service specification"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the serviceSpecCharRelationship is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ServiceSpecCharacteristic": {
            "type": "object",
            "description": "This class represents the key features of this service specification. For example, bandwidth is a characteristic of many different types of services; if bandwidth is a relevant characteristic (e.g., from the point-of-view of a Customer obtaining this Service via a Product) then bandwidth would be a ServiceSpecCharacteristic for that particular Service.",
            "properties": {
                "configurable": {
                    "type": "boolean",
                    "description": "If true, the Boolean indicates that the serviceSpecCharacteristic is configurable"
                },
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the serviceSpecCharacteristic is"
                },
                "extensible": {
                    "type": "boolean",
                    "description": "An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for an Entity."
                },
                "isUnique": {
                    "type": "boolean",
                    "description": "An indicator that specifies if a value is unique for the specification. Possible values are; \"unique while value is in effect\" and \"unique whether value is in effect or not\""
                },
                "maxCardinality": {
                    "type": "integer",
                    "description": "The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
                },
                "minCardinality": {
                    "type": "integer",
                    "description": "The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
                },
                "name": {
                    "type": "string",
                    "description": "A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
                },
                "regex": {
                    "type": "string",
                    "description": "A rule or principle represented in regular expression used to derive the value of a characteristic value."
                },
                "valueType": {
                    "type": "string",
                    "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
                },
                "serviceSpecCharRelationship": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceSpecCharRelationship"
                    },
                    "description": "A list of service spec char relationships (ServiceSpecCharRelationship [*]). An aggregation, migration, substitution, dependency or exclusivity relationship between/among Specification Characteristics."
                },
                "serviceSpecCharacteristicValue": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceSpecCharacteristicValue"
                    },
                    "description": "A list of service spec characteristic values (ServiceSpecCharacteristicValue [*]). A ServiceSpecCharacteristicValue object is used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a ServiceSpecCharacteristic object. The values of the attributes in the ServiceSpecCharacteristicValue object describe the values of the attributes that a corresponding ServiceSpecCharacteristic object can take on."
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the serviceSpecCharacteristic is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                },
                "@valueSchemaLocation": {
                    "type": "string",
                    "description": "This (optional) field provides a link to the schema describing the value type."
                }
            }
        },
        "ServiceSpecCharacteristicValue": {
            "type": "object",
            "description": "A ServiceSpecCharacteristicValue object is used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a ServiceSpecCharacteristic object. The values of the attributes in the ServiceSpecCharacteristicValue object describe the values of the attributes that a corresponding ServiceSpecCharacteristic object can take on.",
            "properties": {
                "isDefault": {
                    "type": "boolean",
                    "description": "Indicates if the value is the default value for a characteristic"
                },
                "rangeInterval": {
                    "type": "string",
                    "description": "An indicator that specifies the inclusion or exclusion of the valueFrom and valueTo attributes. If applicable, possible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\"."
                },
                "regex": {
                    "type": "string",
                    "description": "A regular expression constraint for given value"
                },
                "unitOfMeasure": {
                    "type": "string",
                    "description": "A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning to them numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot."
                },
                "valueFrom": {
                    "type": "integer",
                    "description": "The low range value that a characteristic can take on"
                },
                "valueTo": {
                    "type": "integer",
                    "description": "The upper range value that a characteristic can take on"
                },
                "valueType": {
                    "type": "string",
                    "description": "A kind of value that the characteristic can take on, such as numeric, text, and so forth"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period of time for which a value is applicable"
                },
                "value": {
                    "$ref": "#/definitions/Any",
                    "description": "A discrete value that the characteristic can take on, or the actual value of the characteristic"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ServiceSpecRelationship": {
            "type": "object",
            "description": "A migration, substitution, dependency or exclusivity relationship between/among service specifications.",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name given to the target service specification instance"
                },
                "relationshipType": {
                    "type": "string",
                    "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
                },
                "role": {
                    "type": "string",
                    "description": "The association role for this service specification"
                },
                "validFor": {
                    "$ref": "#/definitions/TimePeriod",
                    "description": "The period for which the serviceSpecRelationship is valid"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ServiceSpecificationRef": {
            "type": "object",
            "description": "Service specification reference: ServiceSpecification(s) required to realize a ProductSpecification.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "version": {
                    "type": "string",
                    "description": "Service specification version"
                },
                "@baseType": {
                    "example": "ResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "example": "LogicalResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "ServiceStateType": {
            "type": "string",
            "description": "Valid values for the lifecycle state of the service",
            "enum": [
                "feasibilityChecked",
                "designed",
                "reserved",
                "inactive",
                "active",
                "terminated"
            ]
        },
        "TargetServiceSchema": {
            "type": "object",
            "description": "The reference object to the schema and type of target service which is described by service specification",
            "required": [
                "@schemaLocation",
                "@type"
            ],
            "properties": {
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "description": "This field provides a link to the schema describing the target service"
                },
                "@type": {
                    "type": "string",
                    "description": "Class type of the target service"
                }
            }
        },
        "Template": {
            "type": "object",
            "properties": {
                "href": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "Threshold": {
            "type": "object",
            "description": "A threshold base entity containing threshold rules.This entity  is  mandatoryThis entity  is  extendableThis entity   does not generate Object Creation notifications (NA)This entity   generates Object Deletion notificationsThis entity   does not generate Object Discovery notifications (NA)This entity supports the Common Get Operation.This entity supports the Common Get Multiple Operation.This entity supports the Common Create Operation.This entity supports the Common Delete Operation.",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The entity instance identifier (EID).This element is generated from an attribute.This attribute  is  invariantThis attribute  is  optionalThis attribute  is  AVC disabled"
                },
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the Performance threshold is.This element is generated from an attribute.This attribute  is  invariantThis attribute  is  optionalThis attribute  is  AVC disabled (NA)"
                },
                "name": {
                    "type": "string",
                    "description": "A word, term, or phrase by which a Performance threshold is known and distinguished from other thresholds.This element is generated from an attribute.This attribute  is  invariantThis attribute  is  mandatoryThis attribute  is  AVC disabled (NA)"
                },
                "thresholdRule": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ThresholdRule"
                    }
                },
                "thresholdType": {
                    "$ref": "#/definitions/ThresholdType"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "Threshold_Create": {
            "type": "object",
            "description": "A threshold base entity containing threshold rules.This entity  is  mandatoryThis entity  is  extendableThis entity   does not generate Object Creation notifications (NA)This entity   generates Object Deletion notificationsThis entity   does not generate Object Discovery notifications (NA)This entity supports the Common Get Operation.This entity supports the Common Get Multiple Operation.This entity supports the Common Create Operation.This entity supports the Common Delete Operation.\nSkipped properties: id,href",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the Performance threshold is.This element is generated from an attribute.This attribute  is  invariantThis attribute  is  optionalThis attribute  is  AVC disabled (NA)"
                },
                "name": {
                    "type": "string",
                    "description": "A word, term, or phrase by which a Performance threshold is known and distinguished from other thresholds.This element is generated from an attribute.This attribute  is  invariantThis attribute  is  mandatoryThis attribute  is  AVC disabled (NA)"
                },
                "thresholdRule": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ThresholdRule"
                    }
                },
                "thresholdType": {
                    "$ref": "#/definitions/ThresholdType"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "Threshold_Update": {
            "type": "object",
            "description": "A threshold base entity containing threshold rules.This entity  is  mandatoryThis entity  is  extendableThis entity   does not generate Object Creation notifications (NA)This entity   generates Object Deletion notificationsThis entity   does not generate Object Discovery notifications (NA)This entity supports the Common Get Operation.This entity supports the Common Get Multiple Operation.This entity supports the Common Create Operation.This entity supports the Common Delete Operation.\nSkipped properties: id,href",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the Performance threshold is.This element is generated from an attribute.This attribute  is  invariantThis attribute  is  optionalThis attribute  is  AVC disabled (NA)"
                },
                "name": {
                    "type": "string",
                    "description": "A word, term, or phrase by which a Performance threshold is known and distinguished from other thresholds.This element is generated from an attribute.This attribute  is  invariantThis attribute  is  mandatoryThis attribute  is  AVC disabled (NA)"
                },
                "thresholdRule": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ThresholdRule"
                    }
                },
                "thresholdType": {
                    "$ref": "#/definitions/ThresholdType"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ThresholdCondition": {
            "type": "string",
            "description": "",
            "enum": [
                "Raise",
                "Clear"
            ]
        },
        "ThresholdJob": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "adminState": {
                    "type": "string"
                },
                "creationTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "executionState": {
                    "type": "string"
                },
                "granularity": {
                    "type": "string"
                },
                "jobPriority": {
                    "type": "integer"
                },
                "lastModifiedTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "monitoredObjectsCriteria": {
                    "type": "string"
                },
                "performanceThreshold": {
                    "type": "integer"
                },
                "scheduleDefinition": {
                    "type": "string"
                },
                "trackingRecord": {
                    "type": "string"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ThresholdJob_Create": {
            "type": "object",
            "description": "\nSkipped properties: id,href",
            "properties": {
                "adminState": {
                    "type": "string"
                },
                "creationTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "executionState": {
                    "type": "string"
                },
                "granularity": {
                    "type": "string"
                },
                "jobPriority": {
                    "type": "integer"
                },
                "lastModifiedTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "monitoredObjectsCriteria": {
                    "type": "string"
                },
                "performanceThreshold": {
                    "type": "integer"
                },
                "scheduleDefinition": {
                    "type": "string"
                },
                "trackingRecord": {
                    "type": "string"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ThresholdJob_Update": {
            "type": "object",
            "description": "\nSkipped properties: id,href",
            "properties": {
                "adminState": {
                    "type": "string"
                },
                "creationTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "executionState": {
                    "type": "string"
                },
                "granularity": {
                    "type": "string"
                },
                "jobPriority": {
                    "type": "integer"
                },
                "lastModifiedTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "monitoredObjectsCriteria": {
                    "type": "string"
                },
                "performanceThreshold": {
                    "type": "integer"
                },
                "scheduleDefinition": {
                    "type": "string"
                },
                "trackingRecord": {
                    "type": "string"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ThresholdRef": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique identifier"
                },
                "href": {
                    "type": "string",
                    "format": "uri",
                    "description": "Hyperlink reference"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the related entity."
                },
                "@baseType": {
                    "example": "ResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "example": "https://mycsp.com:8080/tmf-api/schema/Resource/LogicalResourceSpecification.schema.json",
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "example": "LogicalResourceSpecification",
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class Extensible name"
                },
                "@referredType": {
                    "type": "string",
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            },
            "required": [
                "id"
            ]
        },
        "ThresholdRule": {
            "type": "object",
            "description": "ThresholdRule A base entity for concrete definition of thresholds.This datatype  is  abstract",
            "properties": {
                "performanceConsequence": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceConsequence"
                    },
                    "description": "A threshold crossing or a threshold ceased to be crossing results in a Performance consequence.This element is generated from an attribute.This attribute  is  optional"
                },
                "thresholdRuleCondition": {
                    "$ref": "#/definitions/ThresholdCondition"
                },
                "thresholdRuleSeverity": {
                    "$ref": "#/definitions/PerceivedSeverity"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ThresholdRule_Create": {
            "type": "object",
            "description": "ThresholdRule A base entity for concrete definition of thresholds.This datatype  is  abstract\nSkipped properties: id,href",
            "properties": {
                "performanceConsequence": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceConsequence"
                    },
                    "description": "A threshold crossing or a threshold ceased to be crossing results in a Performance consequence.This element is generated from an attribute.This attribute  is  optional"
                },
                "thresholdRuleCondition": {
                    "$ref": "#/definitions/ThresholdCondition"
                },
                "thresholdRuleSeverity": {
                    "$ref": "#/definitions/PerceivedSeverity"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ThresholdRule_Update": {
            "type": "object",
            "description": "ThresholdRule A base entity for concrete definition of thresholds.This datatype  is  abstract\nSkipped properties: id,href",
            "properties": {
                "performanceConsequence": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PerformanceConsequence"
                    },
                    "description": "A threshold crossing or a threshold ceased to be crossing results in a Performance consequence.This element is generated from an attribute.This attribute  is  optional"
                },
                "thresholdRuleCondition": {
                    "$ref": "#/definitions/ThresholdCondition"
                },
                "thresholdRuleSeverity": {
                    "$ref": "#/definitions/PerceivedSeverity"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ThresholdType": {
            "type": "string",
            "description": "The Threshold Type may be either LogicDefinition or PreDefined",
            "enum": [
                "LogicDefinition",
                "PreDefined"
            ]
        },
        "TimePeriod": {
            "type": "object",
            "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both",
            "properties": {
                "endDateTime": {
                    "example": "1985-04-12T23:20:50.52Z",
                    "type": "string",
                    "format": "date-time",
                    "description": "End of the time period, using IETC-RFC-3339 format"
                },
                "startDateTime": {
                    "example": "1985-04-12T23:20:50.52Z",
                    "type": "string",
                    "format": "date-time",
                    "description": "Start of the time period, using IETC-RFC-3339 format"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "Topic": {
            "type": "object",
            "description": "Is a event channel provided by the Event Streaming API",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "href": {
                    "type": "string",
                    "description": "Reference of the related entity."
                },
                "contentQuery": {
                    "type": "string",
                    "description": "is the filter that will be applied on the content of the Event."
                },
                "headerQuery": {
                    "type": "string",
                    "description": "is the filter that will be applied on the Event header properties."
                },
                "name": {
                    "type": "string",
                    "description": "use to identify grouping of events, per domain, per event types, per access control-right and so on."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "Topic_Create": {
            "type": "object",
            "description": "Is a event channel provided by the Event Streaming API\nSkipped properties: id,href",
            "properties": {
                "contentQuery": {
                    "type": "string",
                    "description": "is the filter that will be applied on the content of the Event."
                },
                "headerQuery": {
                    "type": "string",
                    "description": "is the filter that will be applied on the Event header properties."
                },
                "name": {
                    "type": "string",
                    "description": "use to identify grouping of events, per domain, per event types, per access control-right and so on."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "UnAckAlarms": {
            "type": "object",
            "description": "Task resource for unacknowledge alarms operation",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The identifier of the task"
                },
                "href": {
                    "type": "string",
                    "description": "A reference to the task"
                },
                "ackSystemId": {
                    "type": "string",
                    "description": "Name of the unacknowledging system"
                },
                "ackTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the unacknowledgement"
                },
                "ackUserId": {
                    "type": "string",
                    "description": "Name of the unacknowledging user"
                },
                "state": {
                    "type": "string",
                    "description": "Current state of the operation task"
                },
                "alarmPattern": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Alarm"
                    },
                    "description": "Alarm patterns to match target alarms. An alarm will match if all of the sttributes in any of the patterns compare equal to those attributes of the alarm."
                },
                "unAckedAlarm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmRefOrValue"
                    },
                    "description": "The successfully unacknowledged alarms"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "UnAckAlarms_Create": {
            "type": "object",
            "description": "Task resource for unacknowledge alarms operation\nSkipped properties: id,href",
            "required": [
                "ackSystemId",
                "ackUserId",
                "alarmPattern"
            ],
            "properties": {
                "ackSystemId": {
                    "type": "string",
                    "description": "Name of the unacknowledging system"
                },
                "ackTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the unacknowledgement"
                },
                "ackUserId": {
                    "type": "string",
                    "description": "Name of the unacknowledging user"
                },
                "state": {
                    "type": "string",
                    "description": "Current state of the operation task"
                },
                "alarmPattern": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Alarm"
                    },
                    "minItems": 1,
                    "description": "Alarm patterns to match target alarms. An alarm will match if all of the sttributes in any of the patterns compare equal to those attributes of the alarm."
                },
                "unAckedAlarm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmRefOrValue"
                    },
                    "description": "The successfully unacknowledged alarms"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "UnGroupAlarms": {
            "type": "object",
            "description": "Task resource for ungroup alarms operation",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The identifier of the task"
                },
                "href": {
                    "type": "string",
                    "description": "A reference to the task"
                },
                "alarmChangedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the uncorrelation"
                },
                "sourceSystemId": {
                    "type": "string",
                    "description": "Source system identifier"
                },
                "state": {
                    "type": "string",
                    "description": "Current state of the operation task"
                },
                "correlatedAlarm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmRefOrValue"
                    },
                    "description": "Correlated alarms"
                },
                "parentAlarm": {
                    "$ref": "#/definitions/AlarmRefOrValue",
                    "description": "Root cause alarm"
                },
                "unGroupedAlarm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmRefOrValue"
                    },
                    "description": "The successfully uncorrelated alarms"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "UnGroupAlarms_Create": {
            "type": "object",
            "description": "Task resource for ungroup alarms operation\nSkipped properties: id,href",
            "required": [
                "sourceSystemId",
                "alarmChangedTime",
                "parentAlarm",
                "correlatedAlarm"
            ],
            "properties": {
                "alarmChangedTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the uncorrelation"
                },
                "sourceSystemId": {
                    "type": "string",
                    "description": "Source system identifier"
                },
                "state": {
                    "type": "string",
                    "description": "Current state of the operation task"
                },
                "correlatedAlarm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmRefOrValue"
                    },
                    "minItems": 1,
                    "description": "Correlated alarms"
                },
                "parentAlarm": {
                    "$ref": "#/definitions/AlarmRefOrValue",
                    "description": "Root cause alarm"
                },
                "unGroupedAlarm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AlarmRefOrValue"
                    },
                    "description": "The successfully uncorrelated alarms"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "ValidFor": {
            "type": "object",
            "properties": {
                "endDateTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "startDateTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class"
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        },
        "EventSubscription": {
            "type": "object",
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
            "required": [
                "id",
                "callback"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the listener"
                },
                "callback": {
                    "type": "string",
                    "description": "The callback being registered."
                },
                "query": {
                    "type": "string",
                    "description": "additional data to be passed"
                }
            }
        },
        "EventSubscriptionInput": {
            "type": "object",
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
            "required": [
                "callback"
            ],
            "properties": {
                "callback": {
                    "type": "string",
                    "description": "The callback being registered."
                },
                "query": {
                    "type": "string",
                    "description": "additional data to be passed"
                }
            }
        },
        "AiModelCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/AiModelCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "AiModelCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "aiModel": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/AiModel"
                }
            }
        },
        "AiModelAttributeValueChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/AiModelAttributeValueChangeEventPayload"
                }
            }
        },
        "AiModelAttributeValueChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "aiModel": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/AiModel"
                }
            }
        },
        "AiModelStateChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/AiModelStateChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "AiModelStateChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "aiModel": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/AiModel"
                }
            }
        },
        "AiModelDeleteEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/AiModelDeleteEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "AiModelDeleteEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "aiModel": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/AiModel"
                }
            }
        },
        "AiModelSpecificationCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/AiModelSpecificationCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "AiModelSpecificationCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "aiModelSpecification": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/AiModelSpecification"
                }
            }
        },
        "AiModelSpecificationChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/AiModelSpecificationChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "AiModelSpecificationChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "aiModelSpecification": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/AiModelSpecification"
                }
            }
        },
        "AiModelSpecificationDeleteEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/AiModelSpecificationDeleteEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "AiModelSpecificationDeleteEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "aiModelSpecification": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/AiModelSpecification"
                }
            }
        },
        "AlarmCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/AlarmCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "AlarmCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "alarm": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/Alarm"
                }
            }
        },
        "AlarmAttributeValueChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/AlarmAttributeValueChangeEventPayload"
                }
            }
        },
        "AlarmAttributeValueChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "alarm": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/Alarm"
                }
            }
        },
        "AlarmStateChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/AlarmStateChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "AlarmStateChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "alarm": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/Alarm"
                }
            }
        },
        "AlarmDeleteEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/AlarmDeleteEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "AlarmDeleteEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "alarm": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/Alarm"
                }
            }
        },
        "ThresholdCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ThresholdCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ThresholdCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "threshold": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/Threshold"
                }
            }
        },
        "ThresholdAttributeValueChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ThresholdAttributeValueChangeEventPayload"
                }
            }
        },
        "ThresholdAttributeValueChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "threshold": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/Threshold"
                }
            }
        },
        "ThresholdDeleteEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ThresholdDeleteEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ThresholdDeleteEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "threshold": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/Threshold"
                }
            }
        },
        "AiContractCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/AiContractCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "AiContractCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "aiContract": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/AiContract"
                }
            }
        },
        "AiContractAttributeValueChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/AiContractAttributeValueChangeEventPayload"
                }
            }
        },
        "AiContractAttributeValueChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "aiContract": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/AiContract"
                }
            }
        },
        "AiContractStateChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/AiContractStateChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "AiContractStateChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "aiContract": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/AiContract"
                }
            }
        },
        "AiContractDeleteEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/AiContractDeleteEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "AiContractDeleteEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "aiContract": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/AiContract"
                }
            }
        },
        "AiContractSpecificationCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/AiContractSpecificationCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "AiContractSpecificationCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "aiContractSpecification": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/AiContractSpecification"
                }
            }
        },
        "AiContractSpecificationAttributeValueChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/AiContractSpecificationAttributeValueChangeEventPayload"
                }
            }
        },
        "AiContractSpecificationAttributeValueChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "aiContractSpecification": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/AiContractSpecification"
                }
            }
        },
        "AiContractSpecificationStateChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/AiContractSpecificationStateChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "AiContractSpecificationStateChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "aiContractSpecification": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/AiContractSpecification"
                }
            }
        },
        "AiContractSpecificationDeleteEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/AiContractSpecificationDeleteEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "AiContractSpecificationDeleteEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "aiContractSpecification": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/AiContractSpecification"
                }
            }
        },
        "TopicCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/TopicCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "TopicCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "topic": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/Topic"
                }
            }
        },
        "TopicChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/TopicChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "TopicChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "topic": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/Topic"
                }
            }
        },
        "TopicDeleteEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/TopicDeleteEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "TopicDeleteEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "topic": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/Topic"
                }
            }
        },
        "AckAlarmsCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/AckAlarmsCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "AckAlarmsCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "ackAlarms": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/AckAlarms"
                }
            }
        },
        "AckAlarmsStateChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/AckAlarmsStateChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "AckAlarmsStateChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "ackAlarms": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/AckAlarms"
                }
            }
        },
        "UnAckAlarmsCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/UnAckAlarmsCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "UnAckAlarmsCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "unAckAlarms": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/UnAckAlarms"
                }
            }
        },
        "UnAckAlarmsStateChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/UnAckAlarmsStateChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "UnAckAlarmsStateChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "unAckAlarms": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/UnAckAlarms"
                }
            }
        },
        "ClearAlarmsCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ClearAlarmsCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ClearAlarmsCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "clearAlarms": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ClearAlarms"
                }
            }
        },
        "ClearAlarmsStateChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ClearAlarmsStateChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ClearAlarmsStateChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "clearAlarms": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ClearAlarms"
                }
            }
        },
        "CommentAlarmsCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/CommentAlarmsCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "CommentAlarmsCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "commentAlarms": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/CommentAlarms"
                }
            }
        },
        "CommentAlarmsStateChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/CommentAlarmsStateChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "CommentAlarmsStateChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "commentAlarms": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/CommentAlarms"
                }
            }
        },
        "GroupAlarmsCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/GroupAlarmsCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "GroupAlarmsCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "groupAlarms": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/GroupAlarms"
                }
            }
        },
        "GroupAlarmsStateChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/GroupAlarmsStateChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "GroupAlarmsStateChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "groupAlarms": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/GroupAlarms"
                }
            }
        },
        "UnGroupAlarmsCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/UnGroupAlarmsCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "UnGroupAlarmsCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "unGroupAlarms": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/UnGroupAlarms"
                }
            }
        },
        "UnGroupAlarmsStateChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/UnGroupAlarmsStateChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "UnGroupAlarmsStateChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "unGroupAlarms": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/UnGroupAlarms"
                }
            }
        },
        "ThresholdJobCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ThresholdJobCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ThresholdJobCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "thresholdJob": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ThresholdJob"
                }
            }
        },
        "ThresholdJobAttributeValueChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ThresholdJobAttributeValueChangeEventPayload"
                }
            }
        },
        "ThresholdJobAttributeValueChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "thresholdJob": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ThresholdJob"
                }
            }
        },
        "ThresholdJobStateChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ThresholdJobStateChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ThresholdJobStateChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "thresholdJob": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ThresholdJob"
                }
            }
        },
        "ThresholdJobDeleteEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ThresholdJobDeleteEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ThresholdJobDeleteEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "thresholdJob": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ThresholdJob"
                }
            }
        },
        "ThresholdRuleCreateEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ThresholdRuleCreateEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ThresholdRuleCreateEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "thresholdRule": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ThresholdRule"
                }
            }
        },
        "ThresholdRuleAttributeValueChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                },
                "fieldPath": {
                    "type": "string",
                    "description": "The path identifying the object field concerned by this notification."
                },
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ThresholdRuleAttributeValueChangeEventPayload"
                }
            }
        },
        "ThresholdRuleAttributeValueChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "thresholdRule": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ThresholdRule"
                }
            }
        },
        "ThresholdRuleStateChangeEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ThresholdRuleStateChangeEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ThresholdRuleStateChangeEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "thresholdRule": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ThresholdRule"
                }
            }
        },
        "ThresholdRuleDeleteEvent": {
            "type": "object",
            "description": "The notification data structure",
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object",
                    "$ref": "#/definitions/ThresholdRuleDeleteEventPayload"
                },
                "eventId": {
                    "type": "string",
                    "description": "The identifier of the notification."
                },
                "eventTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Time of the event occurrence."
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of the notification."
                },
                "correlationId": {
                    "type": "string",
                    "description": "The correlation id for this event."
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the event."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the event."
                },
                "description": {
                    "type": "string",
                    "description": "An explnatory of the event."
                },
                "priority": {
                    "type": "string",
                    "description": "A priority."
                },
                "timeOcurred": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The time the event occured."
                }
            }
        },
        "ThresholdRuleDeleteEventPayload": {
            "type": "object",
            "description": "The event data structure",
            "properties": {
                "thresholdRule": {
                    "description": "The involved resource data for the event",
                    "$ref": "#/definitions/ThresholdRule"
                }
            }
        },
        "Error": {
            "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)",
            "type": "object",
            "required": [
                "code",
                "reason"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Application relevant detail, defined in the API or a common list."
                },
                "reason": {
                    "type": "string",
                    "description": "Explanation of the reason for the error which can be shown to a client user."
                },
                "message": {
                    "type": "string",
                    "description": "More details and corrective actions related to the error which can be shown to a client user."
                },
                "status": {
                    "type": "string",
                    "description": "HTTP Error code extension"
                },
                "referenceError": {
                    "type": "string",
                    "format": "uri",
                    "description": "URI of documentation describing the error."
                },
                "@baseType": {
                    "type": "string",
                    "description": "When sub-classing, this defines the super-class."
                },
                "@schemaLocation": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                },
                "@type": {
                    "type": "string",
                    "description": "When sub-classing, this defines the sub-class entity name."
                }
            }
        }
    }
}
